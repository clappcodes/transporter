{
  "version": 3,
  "sources": ["../transporter.ts", "../shims.ts", "../colors.ts", "../utils.ts", "../main.transporter.ts", "../text.transporter.ts"],
  "sourcesContent": ["export * from \"./main.transporter.ts\";\nexport * from \"./text.transporter.ts\";\n", "export function ReadableStreamFrom<R>(\n  iterator: AsyncIterable<R> | Iterable<R | PromiseLike<R>>,\n) {\n  return new ReadableStream<R>({\n    async pull(controller) {\n      for await (const chunk of iterator) {\n        controller.enqueue(chunk);\n      }\n\n      controller.close();\n    },\n  });\n}\n\nexport async function* ReadableStreamIterator<R>(this: ReadableStream<R>) {\n  const reader = this.getReader();\n  try {\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) {\n        return;\n      }\n      yield value;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\nif (typeof ReadableStream.from === \"undefined\") {\n  console.log(\"(shim) ReadableStream.from\");\n  ReadableStream.from = ReadableStreamFrom;\n}\n\nif (typeof ReadableStream.prototype[Symbol.asyncIterator] === \"undefined\") {\n  console.log(\"(shim) ReadableStream.prototype[Symbol.asyncIterator]\");\n  Object.defineProperty(ReadableStream.prototype, Symbol.asyncIterator, {\n    value: ReadableStreamIterator,\n  });\n}\n", "// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.\n// This module is browser compatible.\n// A module to print ANSI terminal colors. Inspired by chalk, kleur, and colors\n// on npm.\n\n/**\n * String formatters and utilities for dealing with ANSI color codes.\n *\n * This module is browser compatible.\n *\n * This module supports `NO_COLOR` environmental variable disabling any coloring\n * if `NO_COLOR` is set.\n *\n * @example\n * ```ts\n * import {\n *   bgBlue,\n *   bgRgb24,\n *   bgRgb8,\n *   bold,\n *   italic,\n *   red,\n *   rgb24,\n *   rgb8,\n * } from \"@std/fmt/colors\";\n *\n * console.log(bgBlue(italic(red(bold(\"Hello, World!\")))));\n *\n * // also supports 8bit colors\n *\n * console.log(rgb8(\"Hello, World!\", 42));\n *\n * console.log(bgRgb8(\"Hello, World!\", 42));\n *\n * // and 24bit rgb\n *\n * console.log(rgb24(\"Hello, World!\", {\n *   r: 41,\n *   g: 42,\n *   b: 43,\n * }));\n *\n * console.log(bgRgb24(\"Hello, World!\", {\n *   r: 41,\n *   g: 42,\n *   b: 43,\n * }));\n * ```\n *\n * @module\n */\n\n// deno-lint-ignore no-explicit-any\nconst { Deno } = globalThis as any;\nconst noColor = typeof Deno?.noColor === \"boolean\"\n  ? Deno.noColor as boolean\n  : false;\n\ninterface Code {\n  open: string;\n  close: string;\n  regexp: RegExp;\n}\n\n/** RGB 8-bits per channel. Each in range `0->255` or `0x00->0xff` */\nexport interface Rgb {\n  /** Red component value */\n  r: number;\n  /** Green component value */\n  g: number;\n  /** Blue component value */\n  b: number;\n}\n\nlet enabled = !noColor;\n\n/**\n * Set changing text color to enabled or disabled\n * @param value\n */\nexport function setColorEnabled(value: boolean) {\n  if (Deno?.noColor) {\n    return;\n  }\n\n  enabled = value;\n}\n\n/** Get whether text color change is enabled or disabled. */\nexport function getColorEnabled(): boolean {\n  return enabled;\n}\n\n/**\n * Builds color code\n * @param open\n * @param close\n */\nfunction code(open: number[], close: number): Code {\n  return {\n    open: `\\x1b[${open.join(\";\")}m`,\n    close: `\\x1b[${close}m`,\n    regexp: new RegExp(`\\\\x1b\\\\[${close}m`, \"g\"),\n  };\n}\n\n/**\n * Applies color and background based on color code and its associated text\n * @param str text to apply color settings to\n * @param code color code to apply\n */\nfunction run(str: string, code: Code): string {\n  return enabled\n    ? `${code.open}${str.replace(code.regexp, code.open)}${code.close}`\n    : str;\n}\n\n/**\n * Reset the text modified.\n * @param str text to reset\n */\nexport function reset(str: string): string {\n  return run(str, code([0], 0));\n}\n\n/**\n * Make the text bold.\n * @param str text to make bold\n */\nexport function bold(str: string): string {\n  return run(str, code([1], 22));\n}\n\n/**\n * The text emits only a small amount of light.\n * @param str text to dim\n *\n * Warning: Not all terminal emulators support `dim`.\n * For compatibility across all terminals, use {@linkcode gray} or {@linkcode brightBlack} instead.\n */\nexport function dim(str: string): string {\n  return run(str, code([2], 22));\n}\n\n/**\n * Make the text italic.\n * @param str text to make italic\n */\nexport function italic(str: string): string {\n  return run(str, code([3], 23));\n}\n\n/**\n * Make the text underline.\n * @param str text to underline\n */\nexport function underline(str: string): string {\n  return run(str, code([4], 24));\n}\n\n/**\n * Invert background color and text color.\n * @param str text to invert its color\n */\nexport function inverse(str: string): string {\n  return run(str, code([7], 27));\n}\n\n/**\n * Make the text hidden.\n * @param str text to hide\n */\nexport function hidden(str: string): string {\n  return run(str, code([8], 28));\n}\n\n/**\n * Put horizontal line through the center of the text.\n * @param str text to strike through\n */\nexport function strikethrough(str: string): string {\n  return run(str, code([9], 29));\n}\n\n/**\n * Set text color to black.\n * @param str text to make black\n */\nexport function black(str: string): string {\n  return run(str, code([30], 39));\n}\n\n/**\n * Set text color to red.\n * @param str text to make red\n */\nexport function red(str: string): string {\n  return run(str, code([31], 39));\n}\n\n/**\n * Set text color to green.\n * @param str text to make green\n */\nexport function green(str: string): string {\n  return run(str, code([32], 39));\n}\n\n/**\n * Set text color to yellow.\n * @param str text to make yellow\n */\nexport function yellow(str: string): string {\n  return run(str, code([33], 39));\n}\n\n/**\n * Set text color to blue.\n * @param str text to make blue\n */\nexport function blue(str: string): string {\n  return run(str, code([34], 39));\n}\n\n/**\n * Set text color to magenta.\n * @param str text to make magenta\n */\nexport function magenta(str: string): string {\n  return run(str, code([35], 39));\n}\n\n/**\n * Set text color to cyan.\n * @param str text to make cyan\n */\nexport function cyan(str: string): string {\n  return run(str, code([36], 39));\n}\n\n/**\n * Set text color to white.\n * @param str text to make white\n */\nexport function white(str: string): string {\n  return run(str, code([37], 39));\n}\n\n/**\n * Set text color to gray.\n * @param str text to make gray\n */\nexport function gray(str: string): string {\n  return brightBlack(str);\n}\n\n/**\n * Set text color to bright black.\n * @param str text to make bright-black\n */\nexport function brightBlack(str: string): string {\n  return run(str, code([90], 39));\n}\n\n/**\n * Set text color to bright red.\n * @param str text to make bright-red\n */\nexport function brightRed(str: string): string {\n  return run(str, code([91], 39));\n}\n\n/**\n * Set text color to bright green.\n * @param str text to make bright-green\n */\nexport function brightGreen(str: string): string {\n  return run(str, code([92], 39));\n}\n\n/**\n * Set text color to bright yellow.\n * @param str text to make bright-yellow\n */\nexport function brightYellow(str: string): string {\n  return run(str, code([93], 39));\n}\n\n/**\n * Set text color to bright blue.\n * @param str text to make bright-blue\n */\nexport function brightBlue(str: string): string {\n  return run(str, code([94], 39));\n}\n\n/**\n * Set text color to bright magenta.\n * @param str text to make bright-magenta\n */\nexport function brightMagenta(str: string): string {\n  return run(str, code([95], 39));\n}\n\n/**\n * Set text color to bright cyan.\n * @param str text to make bright-cyan\n */\nexport function brightCyan(str: string): string {\n  return run(str, code([96], 39));\n}\n\n/**\n * Set text color to bright white.\n * @param str text to make bright-white\n */\nexport function brightWhite(str: string): string {\n  return run(str, code([97], 39));\n}\n\n/**\n * Set background color to black.\n * @param str text to make its background black\n */\nexport function bgBlack(str: string): string {\n  return run(str, code([40], 49));\n}\n\n/**\n * Set background color to red.\n * @param str text to make its background red\n */\nexport function bgRed(str: string): string {\n  return run(str, code([41], 49));\n}\n\n/**\n * Set background color to green.\n * @param str text to make its background green\n */\nexport function bgGreen(str: string): string {\n  return run(str, code([42], 49));\n}\n\n/**\n * Set background color to yellow.\n * @param str text to make its background yellow\n */\nexport function bgYellow(str: string): string {\n  return run(str, code([43], 49));\n}\n\n/**\n * Set background color to blue.\n * @param str text to make its background blue\n */\nexport function bgBlue(str: string): string {\n  return run(str, code([44], 49));\n}\n\n/**\n *  Set background color to magenta.\n * @param str text to make its background magenta\n */\nexport function bgMagenta(str: string): string {\n  return run(str, code([45], 49));\n}\n\n/**\n * Set background color to cyan.\n * @param str text to make its background cyan\n */\nexport function bgCyan(str: string): string {\n  return run(str, code([46], 49));\n}\n\n/**\n * Set background color to white.\n * @param str text to make its background white\n */\nexport function bgWhite(str: string): string {\n  return run(str, code([47], 49));\n}\n\n/**\n * Set background color to bright black.\n * @param str text to make its background bright-black\n */\nexport function bgBrightBlack(str: string): string {\n  return run(str, code([100], 49));\n}\n\n/**\n * Set background color to bright red.\n * @param str text to make its background bright-red\n */\nexport function bgBrightRed(str: string): string {\n  return run(str, code([101], 49));\n}\n\n/**\n * Set background color to bright green.\n * @param str text to make its background bright-green\n */\nexport function bgBrightGreen(str: string): string {\n  return run(str, code([102], 49));\n}\n\n/**\n * Set background color to bright yellow.\n * @param str text to make its background bright-yellow\n */\nexport function bgBrightYellow(str: string): string {\n  return run(str, code([103], 49));\n}\n\n/**\n * Set background color to bright blue.\n * @param str text to make its background bright-blue\n */\nexport function bgBrightBlue(str: string): string {\n  return run(str, code([104], 49));\n}\n\n/**\n * Set background color to bright magenta.\n * @param str text to make its background bright-magenta\n */\nexport function bgBrightMagenta(str: string): string {\n  return run(str, code([105], 49));\n}\n\n/**\n * Set background color to bright cyan.\n * @param str text to make its background bright-cyan\n */\nexport function bgBrightCyan(str: string): string {\n  return run(str, code([106], 49));\n}\n\n/**\n * Set background color to bright white.\n * @param str text to make its background bright-white\n */\nexport function bgBrightWhite(str: string): string {\n  return run(str, code([107], 49));\n}\n\n/* Special Color Sequences */\n\n/**\n * Clam and truncate color codes\n * @param n\n * @param max number to truncate to\n * @param min number to truncate from\n */\nfunction clampAndTruncate(n: number, max = 255, min = 0): number {\n  return Math.trunc(Math.max(Math.min(n, max), min));\n}\n\n/**\n * Set text color using paletted 8bit colors.\n * https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit\n * @param str text color to apply paletted 8bit colors to\n * @param color code\n */\nexport function rgb8(str: string, color: number): string {\n  return run(str, code([38, 5, clampAndTruncate(color)], 39));\n}\n\n/**\n * Set background color using paletted 8bit colors.\n * https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit\n * @param str text color to apply paletted 8bit background colors to\n * @param color code\n */\nexport function bgRgb8(str: string, color: number): string {\n  return run(str, code([48, 5, clampAndTruncate(color)], 49));\n}\n\n/**\n * Set text color using 24bit rgb.\n * `color` can be a number in range `0x000000` to `0xffffff` or\n * an `Rgb`.\n *\n * To produce the color magenta:\n *\n * ```ts\n * import { rgb24 } from \"@std/fmt/colors\";\n *\n * rgb24(\"foo\", 0xff00ff);\n * rgb24(\"foo\", {r: 255, g: 0, b: 255});\n * ```\n * @param str text color to apply 24bit rgb to\n * @param color code\n */\nexport function rgb24(str: string, color: number | Rgb): string {\n  if (typeof color === \"number\") {\n    return run(\n      str,\n      code(\n        [38, 2, (color >> 16) & 0xff, (color >> 8) & 0xff, color & 0xff],\n        39,\n      ),\n    );\n  }\n  return run(\n    str,\n    code(\n      [\n        38,\n        2,\n        clampAndTruncate(color.r),\n        clampAndTruncate(color.g),\n        clampAndTruncate(color.b),\n      ],\n      39,\n    ),\n  );\n}\n\n/**\n * Set background color using 24bit rgb.\n * `color` can be a number in range `0x000000` to `0xffffff` or\n * an `Rgb`.\n *\n * To produce the color magenta:\n *\n * ```ts\n * import { bgRgb24 } from \"@std/fmt/colors\";\n *\n * bgRgb24(\"foo\", 0xff00ff);\n * bgRgb24(\"foo\", {r: 255, g: 0, b: 255});\n * ```\n * @param str text color to apply 24bit rgb to\n * @param color code\n */\nexport function bgRgb24(str: string, color: number | Rgb): string {\n  if (typeof color === \"number\") {\n    return run(\n      str,\n      code(\n        [48, 2, (color >> 16) & 0xff, (color >> 8) & 0xff, color & 0xff],\n        49,\n      ),\n    );\n  }\n  return run(\n    str,\n    code(\n      [\n        48,\n        2,\n        clampAndTruncate(color.r),\n        clampAndTruncate(color.g),\n        clampAndTruncate(color.b),\n      ],\n      49,\n    ),\n  );\n}\n\n// https://github.com/chalk/ansi-regex/blob/02fa893d619d3da85411acc8fd4e2eea0e95a9d9/index.js\nconst ANSI_PATTERN = new RegExp(\n  [\n    \"[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)\",\n    \"(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TXZcf-nq-uy=><~]))\",\n  ].join(\"|\"),\n  \"g\",\n);\n\n/**\n * Remove ANSI escape codes from the string.\n * @param string to remove ANSI escape codes from\n *\n *  @deprecated (will be removed in 1.0.0) Use {@linkcode stripAnsiCode} instead.\n */\nexport function stripColor(string: string): string {\n  return stripAnsiCode(string);\n}\n\n/**\n * Remove ANSI escape codes from the string.\n *\n * @param string to remove ANSI escape codes from\n */\nexport function stripAnsiCode(string: string): string {\n  return string.replace(ANSI_PATTERN, \"\");\n}\n", "// deno-lint-ignore-file\nimport * as colors from \"./colors.ts\";\nimport {\n  type IncomingStream,\n  type OutgoingStream,\n} from \"./main.transporter.ts\";\n\nexport { colors };\n\nexport const DEBUG: boolean = typeof Deno !== \"undefined\"\n  ? Boolean(Deno.env.get(\"DEBUG\"))\n  : Reflect.get(globalThis, \"DEBUG\");\n\nexport const isDebug = (): boolean =>\n  typeof Deno !== \"undefined\"\n    ? Boolean(Deno.env.get(\"DEBUG\"))\n    : Reflect.get(globalThis, \"DEBUG\");\n\nconsole.log(\n  colors.green(\"(T) DEBUG\") + \"=\" +\n    colors.white(DEBUG + \"\"),\n);\n\nexport enum ReadyState {\n  CONNECTING = 0,\n  INCOMING = 1,\n  OUTGOING = 2,\n  OPEN = 3,\n  CLOSED = 4,\n  ERRORED = 5,\n}\n\nexport function* mkRangeIterator(\n  start = 0,\n  end = Infinity,\n  step = 1,\n): Generator<number, number, unknown> {\n  let iterationCount = 0;\n  for (let i = start; i < end; i += step) {\n    iterationCount++;\n    yield i;\n  }\n  return iterationCount;\n}\n\nexport async function* mkRangeAsyncIterator(\n  start = 0,\n  end = Infinity,\n  delay = 100,\n): AsyncGenerator<unknown, number, unknown> {\n  let iterationCount = 0;\n  for (let i = start; i < end; i += 1) {\n    iterationCount++;\n    yield await new Promise((resolve) => {\n      setTimeout(() => resolve(i), delay);\n    });\n  }\n  return iterationCount;\n}\n\nexport class DeferredPromise<T> extends Promise<T> {\n  declare resolve: (value: T) => void;\n  declare reject: (reason?: unknown) => void;\n\n  constructor(\n    resolver?: (\n      resolve: (value: T) => void,\n      reject: (reason?: unknown) => void,\n    ) => void,\n  ) {\n    const that = {};\n    super(function (resolve, reject) {\n      Object.assign(that, { resolve, reject });\n    });\n    Object.assign(this, that);\n    if (resolver) {\n      resolver(this.resolve, this.reject);\n    }\n  }\n}\n\nexport function log(\n  _this: IncomingStream | OutgoingStream,\n  method: string,\n  ...value: unknown[]\n) {\n  if (!isDebug()) return;\n  const isIn = _this.constructor.name === \"IncomingStream\";\n  const nameColor = isIn ? colors.cyan : colors.magenta;\n  const nameBg = (a: string) => a;\n\n  console.log(\n    colors.gray(\n      `${(nameColor(\n        nameBg(\n          colors.bold(_this.name) + \"[\" + _this.env + \"]\" + \" /\" +\n            colors.italic(_this.url.pathname) +\n            \" \",\n        ),\n      ))} ${colors.brightWhite(colors.bold(method))}(${\n        colors.brightYellow(_this.id) + \", \" +\n        colors.brightGreen(_this.idx + \"\")\n      }) ${colors.blue(\"=>\")}`,\n    ),\n    ...value,\n  );\n}\n\nexport async function getStream(\n  url: URL | string,\n  transform: TransformStream = new TextDecoderStream(),\n): Promise<{\n  url: URL;\n  id: number;\n  request: Request;\n  response: Response;\n  readable: ReadableStream<string>;\n}> {\n  url = new URL(url, location.href);\n\n  const abortController = new AbortController();\n  const headers = new Headers();\n\n  const request = new Request(url, {\n    method: \"GET\",\n    cache: \"no-cache\",\n    // @ts-ignore ?\n    signal: abortController.signal,\n    headers,\n  });\n\n  const response = await fetch(request);\n  const id = Number(response.headers.get(\"duplex-id\") || \"0\");\n  url.hash = `#${id}`;\n\n  if (!response.body) {\n    throw new Error(`Response body`);\n  }\n\n  const readable = response.body.pipeThrough(transform);\n\n  return {\n    url,\n    id,\n    request,\n    response,\n    readable,\n  };\n}\n\nexport function putStream(\n  url: URL | string,\n  transform: TransformStream = new TextEncoderStream(),\n): {\n  id: number;\n  writable: WritableStream<any>;\n  readable: ReadableStream<any>;\n  readable1: ReadableStream<any>;\n  readable2: ReadableStream<any>;\n  headers: Headers;\n  request: Request;\n  response: Promise<Response>;\n  abortController: AbortController;\n} {\n  url = new URL(url, location.href);\n\n  const { writable, readable } = transform;\n  const [readable1, readable2] = readable.tee();\n  const abortController = new AbortController();\n\n  const headers = new Headers();\n  const id = Number(url.hash.slice(1) || \"0\");\n\n  if (id) {\n    headers.set(\"duplex-id\", String(id));\n  }\n\n  const request = new Request(url, {\n    method: \"PUT\",\n    body: readable1,\n    cache: \"no-cache\",\n    // @ts-ignore ?\n    duplex: \"half\",\n    signal: abortController.signal,\n    headers,\n  });\n\n  const response = fetch(request);\n\n  response.then(async (response) => {\n    if (response.ok) {\n      const message = await response.text();\n\n      console.log(\"[closed]\", message);\n      return;\n    }\n\n    const status = response.status;\n    const message = await response.text();\n\n    throw new Error(`Request failed: ${message}`, { cause: status });\n  }).catch((error: Error) => {\n    console.warn(error.name, error.cause, error.message);\n  });\n\n  const o = {\n    id,\n    writable,\n    readable,\n    readable1,\n    readable2,\n    headers,\n    request,\n    response,\n    abortController,\n  };\n\n  return o;\n}\n\nexport function createRead<T>(\n  readable: ReadableStream<T> | { readable: ReadableStream<T> },\n  cb: (chunk: T) => void,\n): Promise<void> {\n  const reader = (readable instanceof ReadableStream)\n    ? readable.getReader()\n    : readable.readable.getReader();\n\n  async function read(cb: (chunk: T) => void) {\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          return;\n        }\n        cb(value);\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  }\n\n  return read(cb);\n}\n\nexport function createWrite<T>(\n  writable: WritableStream<T> | { writable: WritableStream<T> },\n): (chunk: T) => Promise<void> {\n  const writer = (writable instanceof WritableStream)\n    ? writable.getWriter()\n    : writable.writable.getWriter();\n\n  Object.assign(write, { writer });\n\n  async function write(chunk: T) {\n    await writer.ready;\n    await writer.write(chunk);\n  }\n\n  return write;\n}\n\nexport const swapObject = <T extends { [key: PropertyKey]: any }>(\n  obj: T,\n): {\n  [K in keyof T as T[K]]: K;\n} => Object.fromEntries(Object.entries(obj).map(([k, v]) => [v, k]));\n\nexport const valueFromKeyObject = <T extends { [key: PropertyKey]: any }>(\n  obj: T,\n): {\n  [K in keyof T]: K;\n} => Object.fromEntries(Object.entries(obj).map(([k, _v]) => [k as any, k]));\n\nexport class PipeStream<T> {\n  constructor(\n    private _source: ReadableStream<T>,\n    private _transform: TransformStream,\n    private _sink: WritableStream<T>,\n  ) {\n    this._source.pipeThrough(_transform).pipeTo(_sink);\n  }\n\n  get source() {\n    return this._source;\n  }\n\n  get transform() {\n    return this._transform;\n  }\n\n  get sink() {\n    return this._sink;\n  }\n}\n\ntype LengthOfTuple<T extends any[]> = T extends { length: infer L } ? L\n  : never;\ntype DropFirstInTuple<T extends any[]> = ((...args: T) => any) extends\n  (arg: any, ...rest: infer U) => any ? U : T;\ntype LastInTuple<T extends any[]> = T[LengthOfTuple<DropFirstInTuple<T>>];\n\nexport class PipelineStream<\n  T extends [TransformStream, ...TransformStream[]],\n> {\n  readable: LastInTuple<T>[\"readable\"];\n  writable: T[0][\"writable\"];\n\n  constructor(\n    private transformers: T,\n    writableStrategy?: QueuingStrategy,\n    readableStrategy?: QueuingStrategy,\n  ) {\n    const [first, ...rest] = this.transformers;\n\n    this.writable = first.writable;\n    this.readable = rest.reduce(\n      (readable, transform) => readable.pipeThrough(transform),\n      first.readable,\n    );\n\n    // if (this.transformers.length === 3) {\n    //   this.readable = this.transformers[0].readable\n    //     .pipeThrough(this.transformers[1])\n    //     .pipeThrough(this.transformers[2]);\n    // } else {\n    //   this.readable = this.transformers.at(-1)!.readable;\n    // }\n  }\n}\n\n// const pip = new PipelineStream([\n//   new TransformStream<string, number>(),\n//   new TransformStream<number, symbol>(),\n//   new TransformStream<string, number>(),\n// ]);\n\n// pip.writable.getWriter().write(\"ss\");\n// pip.readable.getReader();\n", "// deno-lint-ignore-file no-explicit-any require-await\nimport \"./shims.ts\";\nimport { DeferredPromise, log, PipelineStream } from \"./utils.ts\";\n\nexport class OutgoingStream<\n  T extends [TransformStream<any, Uint8Array>, ...TransformStream[]] = [\n    TransformStream<any, Uint8Array>,\n  ],\n  I = any,\n  O extends Uint8Array = Uint8Array,\n> {\n  static idx: number = 0;\n  static set: Set<OutgoingStream<any, Uint8Array>> = new Set<OutgoingStream>();\n  static add = (\n    instance: OutgoingStream,\n  ): Set<OutgoingStream<any, Uint8Array>> => this.set.add(instance);\n  static del = (instance: OutgoingStream): boolean => this.set.delete(instance);\n  static get = (\n    obj: { idx?: number; id?: string },\n  ): OutgoingStream<any, Uint8Array>[] => {\n    return Array.from(this.set).filter((instance) => {\n      const a = obj.id && instance.id === obj.id;\n      const b = obj.idx && instance.idx === obj.idx;\n      return a || b;\n    });\n  };\n  #writable?: WritableStream<I>;\n\n  ready: Promise<this>;\n  closed: DeferredPromise<unknown>;\n  pipeline: PipelineStream<T>;\n  readable: ReadableStream<any>;\n  // get readable() {\n  //   return this.pipeline.readable;\n  // }\n  static get size(): number {\n    return this.set.size;\n  }\n\n  public idx = OutgoingStream.idx++;\n  public id: string;\n\n  // public readable: ReadableStream<Uint8Array>;\n\n  static write<T>(chunk: T) {\n    for (const outgoing of this.set) {\n      outgoing.write(chunk);\n    }\n  }\n\n  declare controller: ReadableStreamDefaultController<I>;\n\n  headers: Headers;\n  name = \" \u2190 \" + this.constructor.name; // \u2192\n  url: URL;\n  env: \"client\" | \"server\";\n\n  constructor(\n    url: URL | string | Request,\n    transformers: T, // TransformStream<I, O>[], // TransformStream<I, O> = new TransformStream<I, O>(),\n  ) {\n    // add this instance to set\n    OutgoingStream.add(this);\n    this.env = url instanceof Request ? \"server\" : \"client\";\n    this.url = (url instanceof Request)\n      ? new URL(url.url)\n      : new URL(url, String(location));\n\n    this.id = this.url.searchParams.get(\"id\") || \"x\" + String(this.idx);\n\n    this.closed = new DeferredPromise();\n    this.pipeline = new PipelineStream(transformers);\n\n    this.readable = new ReadableStream({\n      start: (controller) => {\n        this.controller = controller;\n        log(this, \"start\", OutgoingStream.size);\n      },\n      cancel: (_reason) => {\n        OutgoingStream.del(this);\n        this.closed.resolve(_reason);\n\n        log(this, \"close\", OutgoingStream.size);\n      },\n    }).pipeThrough(this.pipeline);\n\n    if (this.env === \"server\") {\n      this.ready = this.handle(url as Request);\n    } else {\n      this.ready = this.fetch();\n    }\n\n    this.headers = new Headers({\n      \"x-id\": this.id,\n      \"x-idx\": String(this.idx),\n    });\n  }\n\n  get writable(): WritableStream<I> {\n    this.#writable = this.#writable || new WritableStream({\n      write: (chunk) => {\n        this.controller.enqueue(chunk);\n      },\n      close: () => {\n        this.close();\n      },\n      abort: (err) => {\n        console.log(\"Writable error:\", err);\n      },\n    });\n\n    return this.#writable;\n  }\n\n  async write(chunk: I): Promise<void> {\n    try {\n      await this.ready;\n      if (this.controller?.desiredSize! <= 0) {\n        // The internal queue is full, so propagate\n        // the backpressure signal to the underlying source.\n        console.log(\"backpressure signal\", this.controller.desiredSize);\n      }\n      this.controller.enqueue(chunk);\n      log(this, \"write\", chunk);\n    } catch (e) {\n      log(this, \"write\", e);\n    }\n  }\n\n  close(): void {\n    this.controller?.close();\n  }\n\n  async fetch(): Promise<this> {\n    fetch(\n      new Request(this.url, {\n        method: \"POST\",\n        // @ts-ignore ?\n        duplex: \"half\",\n        body: this.readable,\n        headers: this.headers,\n      }),\n    );\n\n    return Promise.resolve(this);\n  }\n\n  async handle(_request: Request): Promise<this> {\n    return Promise.resolve(this);\n  }\n\n  async response(headers: HeadersInit = {}): Promise<Response> {\n    return new Response(this.readable, {\n      headers: { ...this.headers, ...headers },\n    });\n  }\n}\n\nexport class IncomingStream<\n  T extends [TransformStream<I>, ...TransformStream[]],\n  I extends Uint8Array = Uint8Array,\n  O = any,\n> {\n  static idx = 0;\n  public idx = IncomingStream.idx++;\n  public id: string;\n\n  headers: Headers;\n  // readable!: ReadableStream<O>;\n  ready: Promise<this>;\n  closed: DeferredPromise<unknown> = new DeferredPromise();\n\n  name = \" \u2192 \" + this.constructor.name; // \u2190\n  url: URL;\n  env: \"server\" | \"client\";\n  onResponse?: (response: Response) => Promise<void>;\n\n  pipeline: PipelineStream<T>;\n  get readable() {\n    return this.pipeline.readable;\n  }\n\n  constructor(\n    url: string | URL | Request = \"/\",\n    private transformers: T, // TransformStream<I, O> = new TransformStream<I, O>(),\n    { onResponse }: { onResponse?: (response: Response) => Promise<void> } = {},\n  ) {\n    if (onResponse) {\n      this.onResponse = onResponse;\n    }\n\n    this.pipeline = new PipelineStream(transformers);\n\n    this.env = url instanceof Request ? \"server\" : \"client\";\n    this.url = (url instanceof Request)\n      ? new URL(url.url)\n      : typeof location === \"undefined\"\n      ? new URL(url)\n      : new URL(url || \"/\", String(location));\n\n    if (this.env === \"server\") {\n      this.ready = this.handle(url as Request);\n    } else {\n      this.ready = this.fetch();\n    }\n\n    this.id = this.url.searchParams.get(\"id\") || \"x\" + String(this.idx);\n\n    this.headers = new Headers({\n      \"x-id\": this.id,\n      \"x-idx\": String(this.idx),\n    });\n  }\n\n  async *[Symbol.asyncIterator](): AsyncGenerator<Awaited<O>, void, unknown> {\n    const reader = this.readable.getReader();\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          return;\n        }\n        log(this, \"read\", value);\n        yield value;\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  }\n\n  // Browser\n  async fetch(): Promise<this> {\n    const response = await fetch(\n      new Request(this.url, {\n        headers: this.headers,\n      }),\n    );\n    if (this.onResponse) {\n      await this.onResponse(response);\n      return this;\n    }\n\n    if (response.body) {\n      response.body.pipeTo(this.pipeline.writable);\n      // this.readable = response.body.pipeThrough(this.pipeline);\n    } else {\n      throw new TypeError(`Response.body required`);\n    }\n\n    return this;\n  }\n\n  // Server\n  async handle(request: Request): Promise<this> {\n    if (request.body) {\n      request.body.pipeTo(this.pipeline.writable);\n\n      // this.readable = request.body.pipeThrough(this.pipeline);\n    } else {\n      throw new TypeError(`Request.body required`);\n    }\n\n    return this;\n  }\n\n  async response(headers: HeadersInit = {}): Promise<Response> {\n    return new Response(\"done\", {\n      headers: { ...this.headers, ...headers },\n    });\n  }\n}\n", "import { IncomingStream, OutgoingStream } from \"./main.transporter.ts\";\n\nexport class IncomingTextStream\n  extends IncomingStream<[TextDecoderStream, ...TransformStream[]]> {\n  constructor(input: URL | Request | string, t?: TransformStream[]) {\n    super(input || \"/\", [new TextDecoderStream(), ...(t || [])]);\n  }\n}\n\nexport class OutgoingTextStream\n  extends OutgoingStream<[TextEncoderStream, ...TransformStream[]]> {\n  constructor(input: URL | Request | string, t?: TransformStream[]) {\n    super(input || \"/\", [\n      new TextEncoderStream(),\n      ...(t || []),\n    ]);\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAO,WAAS,mBACd,UACA;AACA,WAAO,IAAI,eAAkB;AAAA,MAC3B,MAAM,KAAK,YAAY;AACrB,yBAAiB,SAAS,UAAU;AAClC,qBAAW,QAAQ,KAAK;AAAA,QAC1B;AAEA,mBAAW,MAAM;AAAA,MACnB;AAAA,IACF,CAAC;AAAA,EACH;AAZgB;AAchB,kBAAuB,yBAAmD;AACxE,UAAM,SAAS,KAAK,UAAU;AAC9B,QAAI;AACF,aAAO,MAAM;AACX,cAAM,EAAE,MAAM,MAAM,IAAI,MAAM,OAAO,KAAK;AAC1C,YAAI,MAAM;AACR;AAAA,QACF;AACA,cAAM;AAAA,MACR;AAAA,IACF,UAAE;AACA,aAAO,YAAY;AAAA,IACrB;AAAA,EACF;AAbuB;AAevB,MAAI,OAAO,eAAe,SAAS,aAAa;AAC9C,YAAQ,IAAI,4BAA4B;AACxC,mBAAe,OAAO;AAAA,EACxB;AAEA,MAAI,OAAO,eAAe,UAAU,OAAO,aAAa,MAAM,aAAa;AACzE,YAAQ,IAAI,uDAAuD;AACnE,WAAO,eAAe,eAAe,WAAW,OAAO,eAAe;AAAA,MACpE,OAAO;AAAA,IACT,CAAC;AAAA,EACH;;;ACcA,MAAM,EAAE,MAAAA,MAAK,IAAI;AACjB,MAAM,UAAU,OAAOA,OAAM,YAAY,YACrCA,MAAK,UACL;AAkBJ,MAAI,UAAU,CAAC;AAwBf,WAAS,KAAK,MAAgB,OAAqB;AACjD,WAAO;AAAA,MACL,MAAM,QAAQ,KAAK,KAAK,GAAG,CAAC;AAAA,MAC5B,OAAO,QAAQ,KAAK;AAAA,MACpB,QAAQ,IAAI,OAAO,WAAW,KAAK,KAAK,GAAG;AAAA,IAC7C;AAAA,EACF;AANS;AAaT,WAAS,IAAI,KAAaC,OAAoB;AAC5C,WAAO,UACH,GAAGA,MAAK,IAAI,GAAG,IAAI,QAAQA,MAAK,QAAQA,MAAK,IAAI,CAAC,GAAGA,MAAK,KAAK,KAC/D;AAAA,EACN;AAJS;AAkBF,WAAS,KAAK,KAAqB;AACxC,WAAO,IAAI,KAAK,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC;AAAA,EAC/B;AAFgB;AAmBT,WAAS,OAAO,KAAqB;AAC1C,WAAO,IAAI,KAAK,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC;AAAA,EAC/B;AAFgB;AAwDT,WAAS,MAAM,KAAqB;AACzC,WAAO,IAAI,KAAK,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC;AAAA,EAChC;AAFgB;AAgBT,WAAS,KAAK,KAAqB;AACxC,WAAO,IAAI,KAAK,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC;AAAA,EAChC;AAFgB;AAQT,WAAS,QAAQ,KAAqB;AAC3C,WAAO,IAAI,KAAK,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC;AAAA,EAChC;AAFgB;AAQT,WAAS,KAAK,KAAqB;AACxC,WAAO,IAAI,KAAK,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC;AAAA,EAChC;AAFgB;AAQT,WAAS,MAAM,KAAqB;AACzC,WAAO,IAAI,KAAK,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC;AAAA,EAChC;AAFgB;AAQT,WAAS,KAAK,KAAqB;AACxC,WAAO,YAAY,GAAG;AAAA,EACxB;AAFgB;AAQT,WAAS,YAAY,KAAqB;AAC/C,WAAO,IAAI,KAAK,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC;AAAA,EAChC;AAFgB;AAgBT,WAAS,YAAY,KAAqB;AAC/C,WAAO,IAAI,KAAK,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC;AAAA,EAChC;AAFgB;AAQT,WAAS,aAAa,KAAqB;AAChD,WAAO,IAAI,KAAK,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC;AAAA,EAChC;AAFgB;AAgCT,WAAS,YAAY,KAAqB;AAC/C,WAAO,IAAI,KAAK,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC;AAAA,EAChC;AAFgB;AAuPhB,MAAM,eAAe,IAAI;AAAA,IACvB;AAAA,MACE;AAAA,MACA;AAAA,IACF,EAAE,KAAK,GAAG;AAAA,IACV;AAAA,EACF;;;AChjBO,MAAM,QAAiB,OAAO,SAAS,cAC1C,QAAQ,KAAK,IAAI,IAAI,OAAO,CAAC,IAC7B,QAAQ,IAAI,YAAY,OAAO;AAE5B,MAAM,UAAU,6BACrB,OAAO,SAAS,cACZ,QAAQ,KAAK,IAAI,IAAI,OAAO,CAAC,IAC7B,QAAQ,IAAI,YAAY,OAAO,GAHd;AAKvB,UAAQ;AAAA,IACC,MAAM,WAAW,IAAI,MACnB,MAAM,QAAQ,EAAE;AAAA,EAC3B;AAuCO,MAAM,kBAAN,cAAiC,QAAW;AAAA,IA5DnD,OA4DmD;AAAA;AAAA;AAAA,IAIjD,YACE,UAIA;AACA,YAAM,OAAO,CAAC;AACd,YAAM,SAAU,SAAS,QAAQ;AAC/B,eAAO,OAAO,MAAM,EAAE,SAAS,OAAO,CAAC;AAAA,MACzC,CAAC;AACD,aAAO,OAAO,MAAM,IAAI;AACxB,UAAI,UAAU;AACZ,iBAAS,KAAK,SAAS,KAAK,MAAM;AAAA,MACpC;AAAA,IACF;AAAA,EACF;AAEO,WAAS,IACd,OACA,WACG,OACH;AACA,QAAI,CAAC,QAAQ;AAAG;AAChB,UAAM,OAAO,MAAM,YAAY,SAAS;AACxC,UAAM,YAAY,OAAc,OAAc;AAC9C,UAAM,SAAS,wBAAC,MAAc,GAAf;AAEf,YAAQ;AAAA,MACC;AAAA,QACL,GAAI;AAAA,UACF;AAAA,YACS,KAAK,MAAM,IAAI,IAAI,MAAM,MAAM,MAAM,QACnC,OAAO,MAAM,IAAI,QAAQ,IAChC;AAAA,UACJ;AAAA,QACF,CAAE,IAAW,YAAmB,KAAK,MAAM,CAAC,CAAC,IACpC,aAAa,MAAM,EAAE,IAAI,OACzB,YAAY,MAAM,MAAM,EAAE,CACnC,KAAY,KAAK,IAAI,CAAC;AAAA,MACxB;AAAA,MACA,GAAG;AAAA,IACL;AAAA,EACF;AAzBgB;AA6NT,MAAM,iBAAN,MAEL;AAAA,IAIA,YACU,cACR,kBACA,kBACA;AAHQ;AAIR,YAAM,CAAC,OAAO,GAAG,IAAI,IAAI,KAAK;AAE9B,WAAK,WAAW,MAAM;AACtB,WAAK,WAAW,KAAK;AAAA,QACnB,CAAC,UAAU,cAAc,SAAS,YAAY,SAAS;AAAA,QACvD,MAAM;AAAA,MACR;AAAA,IASF;AAAA,IAxUF,OAgTE;AAAA;AAAA;AAAA,IACA;AAAA,IACA;AAAA,EAuBF;;;ACrUO,MAAM,iBAAN,MAAM,gBAMX;AAAA,IAVF,OAUE;AAAA;AAAA;AAAA,IACA,OAAO,MAAc;AAAA,IACrB,OAAO,MAA4C,oBAAI,IAAoB;AAAA,IAC3E,OAAO,MAAM,CACX,aACyC,KAAK,IAAI,IAAI,QAAQ;AAAA,IAChE,OAAO,MAAM,CAAC,aAAsC,KAAK,IAAI,OAAO,QAAQ;AAAA,IAC5E,OAAO,MAAM,CACX,QACsC;AACtC,aAAO,MAAM,KAAK,KAAK,GAAG,EAAE,OAAO,CAAC,aAAa;AAC/C,cAAM,IAAI,IAAI,MAAM,SAAS,OAAO,IAAI;AACxC,cAAM,IAAI,IAAI,OAAO,SAAS,QAAQ,IAAI;AAC1C,eAAO,KAAK;AAAA,MACd,CAAC;AAAA,IACH;AAAA,IACA;AAAA,IAEA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA;AAAA;AAAA,IAIA,WAAW,OAAe;AACxB,aAAO,KAAK,IAAI;AAAA,IAClB;AAAA,IAEO,MAAM,gBAAe;AAAA,IACrB;AAAA;AAAA,IAIP,OAAO,MAAS,OAAU;AACxB,iBAAW,YAAY,KAAK,KAAK;AAC/B,iBAAS,MAAM,KAAK;AAAA,MACtB;AAAA,IACF;AAAA,IAIA;AAAA,IACA,OAAO,aAAQ,KAAK,YAAY;AAAA;AAAA,IAChC;AAAA,IACA;AAAA,IAEA,YACE,KACA,cACA;AAEA,sBAAe,IAAI,IAAI;AACvB,WAAK,MAAM,eAAe,UAAU,WAAW;AAC/C,WAAK,MAAO,eAAe,UACvB,IAAI,IAAI,IAAI,GAAG,IACf,IAAI,IAAI,KAAK,OAAO,QAAQ,CAAC;AAEjC,WAAK,KAAK,KAAK,IAAI,aAAa,IAAI,IAAI,KAAK,MAAM,OAAO,KAAK,GAAG;AAElE,WAAK,SAAS,IAAI,gBAAgB;AAClC,WAAK,WAAW,IAAI,eAAe,YAAY;AAE/C,WAAK,WAAW,IAAI,eAAe;AAAA,QACjC,OAAO,CAAC,eAAe;AACrB,eAAK,aAAa;AAClB,cAAI,MAAM,SAAS,gBAAe,IAAI;AAAA,QACxC;AAAA,QACA,QAAQ,CAAC,YAAY;AACnB,0BAAe,IAAI,IAAI;AACvB,eAAK,OAAO,QAAQ,OAAO;AAE3B,cAAI,MAAM,SAAS,gBAAe,IAAI;AAAA,QACxC;AAAA,MACF,CAAC,EAAE,YAAY,KAAK,QAAQ;AAE5B,UAAI,KAAK,QAAQ,UAAU;AACzB,aAAK,QAAQ,KAAK,OAAO,GAAc;AAAA,MACzC,OAAO;AACL,aAAK,QAAQ,KAAK,MAAM;AAAA,MAC1B;AAEA,WAAK,UAAU,IAAI,QAAQ;AAAA,QACzB,QAAQ,KAAK;AAAA,QACb,SAAS,OAAO,KAAK,GAAG;AAAA,MAC1B,CAAC;AAAA,IACH;AAAA,IAEA,IAAI,WAA8B;AAChC,WAAK,YAAY,KAAK,aAAa,IAAI,eAAe;AAAA,QACpD,OAAO,CAAC,UAAU;AAChB,eAAK,WAAW,QAAQ,KAAK;AAAA,QAC/B;AAAA,QACA,OAAO,MAAM;AACX,eAAK,MAAM;AAAA,QACb;AAAA,QACA,OAAO,CAAC,QAAQ;AACd,kBAAQ,IAAI,mBAAmB,GAAG;AAAA,QACpC;AAAA,MACF,CAAC;AAED,aAAO,KAAK;AAAA,IACd;AAAA,IAEA,MAAM,MAAM,OAAyB;AACnC,UAAI;AACF,cAAM,KAAK;AACX,YAAI,KAAK,YAAY,eAAgB,GAAG;AAGtC,kBAAQ,IAAI,uBAAuB,KAAK,WAAW,WAAW;AAAA,QAChE;AACA,aAAK,WAAW,QAAQ,KAAK;AAC7B,YAAI,MAAM,SAAS,KAAK;AAAA,MAC1B,SAAS,GAAG;AACV,YAAI,MAAM,SAAS,CAAC;AAAA,MACtB;AAAA,IACF;AAAA,IAEA,QAAc;AACZ,WAAK,YAAY,MAAM;AAAA,IACzB;AAAA,IAEA,MAAM,QAAuB;AAC3B;AAAA,QACE,IAAI,QAAQ,KAAK,KAAK;AAAA,UACpB,QAAQ;AAAA;AAAA,UAER,QAAQ;AAAA,UACR,MAAM,KAAK;AAAA,UACX,SAAS,KAAK;AAAA,QAChB,CAAC;AAAA,MACH;AAEA,aAAO,QAAQ,QAAQ,IAAI;AAAA,IAC7B;AAAA,IAEA,MAAM,OAAO,UAAkC;AAC7C,aAAO,QAAQ,QAAQ,IAAI;AAAA,IAC7B;AAAA,IAEA,MAAM,SAAS,UAAuB,CAAC,GAAsB;AAC3D,aAAO,IAAI,SAAS,KAAK,UAAU;AAAA,QACjC,SAAS,EAAE,GAAG,KAAK,SAAS,GAAG,QAAQ;AAAA,MACzC,CAAC;AAAA,IACH;AAAA,EACF;AAEO,MAAM,iBAAN,MAAM,gBAIX;AAAA,IAoBA,YACE,MAA8B,KACtB,cACR,EAAE,WAAW,IAA4D,CAAC,GAC1E;AAFQ;AAGR,UAAI,YAAY;AACd,aAAK,aAAa;AAAA,MACpB;AAEA,WAAK,WAAW,IAAI,eAAe,YAAY;AAE/C,WAAK,MAAM,eAAe,UAAU,WAAW;AAC/C,WAAK,MAAO,eAAe,UACvB,IAAI,IAAI,IAAI,GAAG,IACf,OAAO,aAAa,cACpB,IAAI,IAAI,GAAG,IACX,IAAI,IAAI,OAAO,KAAK,OAAO,QAAQ,CAAC;AAExC,UAAI,KAAK,QAAQ,UAAU;AACzB,aAAK,QAAQ,KAAK,OAAO,GAAc;AAAA,MACzC,OAAO;AACL,aAAK,QAAQ,KAAK,MAAM;AAAA,MAC1B;AAEA,WAAK,KAAK,KAAK,IAAI,aAAa,IAAI,IAAI,KAAK,MAAM,OAAO,KAAK,GAAG;AAElE,WAAK,UAAU,IAAI,QAAQ;AAAA,QACzB,QAAQ,KAAK;AAAA,QACb,SAAS,OAAO,KAAK,GAAG;AAAA,MAC1B,CAAC;AAAA,IACH;AAAA,IApNF,OAkKE;AAAA;AAAA;AAAA,IACA,OAAO,MAAM;AAAA,IACN,MAAM,gBAAe;AAAA,IACrB;AAAA,IAEP;AAAA;AAAA,IAEA;AAAA,IACA,SAAmC,IAAI,gBAAgB;AAAA,IAEvD,OAAO,aAAQ,KAAK,YAAY;AAAA;AAAA,IAChC;AAAA,IACA;AAAA,IACA;AAAA,IAEA;AAAA,IACA,IAAI,WAAW;AACb,aAAO,KAAK,SAAS;AAAA,IACvB;AAAA,IAkCA,QAAQ,OAAO,aAAa,IAA+C;AACzE,YAAM,SAAS,KAAK,SAAS,UAAU;AACvC,UAAI;AACF,eAAO,MAAM;AACX,gBAAM,EAAE,MAAM,MAAM,IAAI,MAAM,OAAO,KAAK;AAC1C,cAAI,MAAM;AACR;AAAA,UACF;AACA,cAAI,MAAM,QAAQ,KAAK;AACvB,gBAAM;AAAA,QACR;AAAA,MACF,UAAE;AACA,eAAO,YAAY;AAAA,MACrB;AAAA,IACF;AAAA;AAAA,IAGA,MAAM,QAAuB;AAC3B,YAAM,WAAW,MAAM;AAAA,QACrB,IAAI,QAAQ,KAAK,KAAK;AAAA,UACpB,SAAS,KAAK;AAAA,QAChB,CAAC;AAAA,MACH;AACA,UAAI,KAAK,YAAY;AACnB,cAAM,KAAK,WAAW,QAAQ;AAC9B,eAAO;AAAA,MACT;AAEA,UAAI,SAAS,MAAM;AACjB,iBAAS,KAAK,OAAO,KAAK,SAAS,QAAQ;AAAA,MAE7C,OAAO;AACL,cAAM,IAAI,UAAU,wBAAwB;AAAA,MAC9C;AAEA,aAAO;AAAA,IACT;AAAA;AAAA,IAGA,MAAM,OAAO,SAAiC;AAC5C,UAAI,QAAQ,MAAM;AAChB,gBAAQ,KAAK,OAAO,KAAK,SAAS,QAAQ;AAAA,MAG5C,OAAO;AACL,cAAM,IAAI,UAAU,uBAAuB;AAAA,MAC7C;AAEA,aAAO;AAAA,IACT;AAAA,IAEA,MAAM,SAAS,UAAuB,CAAC,GAAsB;AAC3D,aAAO,IAAI,SAAS,QAAQ;AAAA,QAC1B,SAAS,EAAE,GAAG,KAAK,SAAS,GAAG,QAAQ;AAAA,MACzC,CAAC;AAAA,IACH;AAAA,EACF;;;AC5QO,MAAM,qBAAN,cACG,eAA0D;AAAA,IAHpE,OAGoE;AAAA;AAAA;AAAA,IAClE,YAAY,OAA+B,GAAuB;AAChE,YAAM,SAAS,KAAK,CAAC,IAAI,kBAAkB,GAAG,GAAI,KAAK,CAAC,CAAE,CAAC;AAAA,IAC7D;AAAA,EACF;AAEO,MAAM,qBAAN,cACG,eAA0D;AAAA,IAVpE,OAUoE;AAAA;AAAA;AAAA,IAClE,YAAY,OAA+B,GAAuB;AAChE,YAAM,SAAS,KAAK;AAAA,QAClB,IAAI,kBAAkB;AAAA,QACtB,GAAI,KAAK,CAAC;AAAA,MACZ,CAAC;AAAA,IACH;AAAA,EACF;",
  "names": ["Deno", "code"]
}
