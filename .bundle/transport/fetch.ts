var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
import { readable, transform } from "../mod.ts";
import { duplex } from "./handle.ts";
import { RequestStream } from "./stream.ts";
$fetch.fetch = (input, init) => {
  console.log("fetch(", input, init, ")");
  return globalThis.fetch(input, init);
};
function $fetch(input, init) {
  const isBrowser = typeof document !== "undefined";
  const fetch = $fetch.fetch || globalThis.fetch;
  if (isBrowser) {
    console.log("(Browser$)");
    const request2 = new RequestStream(
      input instanceof RequestStream ? input.clone() : input,
      {
        ...init,
        get duplex() {
          return this.method === "POST" && this.body ? "half" : void 0;
        }
      }
    );
    const url = new URL(request2.url);
    const id = url.searchParams.get("stream-id") || url.hash.slice(1) || Math.random().toString().slice(2);
    request2.headers.set("stream-id", id);
    if (request2.method === "POST") {
      const outgoing = request2;
      const incoming = new RequestStream(request2.url, {
        method: "GET",
        headers: request2.headers
      });
      fetch(outgoing);
      return fetch(incoming);
    } else {
      return fetch(request2);
    }
  } else {
    console.log("(Deno@)");
    return fetch(new RequestStream(input, init));
  }
}
__name($fetch, "$fetch");
$fetch.from = async (specifier, input, init) => {
  const handler2 = typeof specifier === "string" ? await import(specifier).then((mod) => {
    return mod.default ? mod.default.fetch || mod.default : mod.fetch;
  }) : specifier;
  if (typeof handler2 !== "function") {
    throw new TypeError(`Invalid Handler (${specifier}): ${typeof handler2}`);
  }
  const duplexHandler = duplex(handler2);
  if (!input) {
    return (input2, init2) => duplexHandler(new RequestStream(input2, init2));
  }
  return duplexHandler(new RequestStream(input, init));
};
$fetch.text = (input, init) => $fetch(input, init).then((response) => response.text());
$fetch.json = (input, init) => $fetch(input, init).then((response) => response.json());
$fetch.get = (input, init) => $fetch(input, { ...init, method: "GET" });
$fetch.post = (input, init) => $fetch(input, { ...init, method: "POST" });
$fetch.read = (input, init) => (cb) => $fetch(input, init).then(readable.fromBody).then(transform.decode).then(readable.read(cb));
const post = /* @__PURE__ */ __name((input, body) => new RequestStream(input, {
  method: "POST",
  // @ts-ignore .
  duplex: "half",
  body
}), "post");
const get = /* @__PURE__ */ __name((input) => new RequestStream(input), "get");
const handler = /* @__PURE__ */ __name((handler2) => duplex(handler2), "handler");
const handle = $fetch.from;
const request = /* @__PURE__ */ __name((input, body) => body ? post(input, body) : get(input), "request");
const pipeTo = /* @__PURE__ */ __name((destination) => (source) => source instanceof ReadableStream ? source.pipeTo(destination) : source.body.pipeTo(destination), "pipeTo");
export {
  $fetch,
  get,
  handle,
  handler,
  pipeTo,
  post,
  request
};
//# sourceMappingURL=data:application/json;base64,
