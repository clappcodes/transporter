var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
import { XRequest } from "./XRequest.ts";
import { STREAM_TYPE, STREAM_TYPE_KEY } from "./handle.ts";
import {
  baseURL,
  createRequest
} from "./api.ts";
function xfetch(input, init) {
  const fetch = xfetch.fetch || globalThis.fetch;
  const request = input instanceof XRequest ? input : ((base) => {
    const url = base && typeof input === "string" ? String(new URL(input, base)) : String(input || "/");
    return createRequest(init?.method, url, init);
  })(baseURL);
  if (request.duplex === "half") {
    console.log("(requireFullDuplex)");
    fetch(request, {
      headers: {
        ...Object.fromEntries(request.headers.entries()),
        [STREAM_TYPE_KEY]: STREAM_TYPE.REQUEST
      }
    });
    return fetch(
      new XRequest(request.method, request.url, {
        headers: {
          ...Object.fromEntries(request.headers.entries()),
          [STREAM_TYPE_KEY]: STREAM_TYPE.RESPONSE
        }
      })
    );
  } else {
    console.log("(FullDuplex Supported)");
    return fetch(request);
  }
}
__name(xfetch, "xfetch");
export {
  xfetch
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vdHJhbnNwb3J0L3hmZXRjaC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgWFJlcXVlc3QgfSBmcm9tIFwiLi9YUmVxdWVzdC50c1wiO1xuaW1wb3J0IHsgU1RSRUFNX1RZUEUsIFNUUkVBTV9UWVBFX0tFWSB9IGZyb20gXCIuL2hhbmRsZS50c1wiO1xuaW1wb3J0IHtcbiAgYmFzZVVSTCxcbiAgY3JlYXRlUmVxdWVzdCxcbiAgWFJlcXVlc3RJbml0LFxuICBYUmVxdWVzdElucHV0LFxuICBYUmVxdWVzdE1ldGhvZCxcbn0gZnJvbSBcIi4vYXBpLnRzXCI7XG5cbi8vIGV4cG9ydCBmdW5jdGlvbiBoYW5kbGU8VCBleHRlbmRzIFhSZXF1ZXN0PGFueSwgYW55LCBhbnk+Pihcbi8vICAgcmVxdWVzdDogVCxcbi8vICAgZmV0Y2g6IFJlcXVlc3RIYW5kbGVyRmV0Y2ggLy8gKHJlcXVlc3Q6IFQpID0+IFJlc3BvbnNlLFxuLy8gICAsXG4vLyApIHtcbi8vICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmZXRjaChyZXF1ZXN0LCBuZXcgQ29udGV4dChyZXF1ZXN0KSkpLnRoZW4oXG4vLyAgICAgKHJlc3BvbnNlKSA9PiB7XG4vLyAgICAgICBpZiAocmVzcG9uc2UgaW5zdGFuY2VvZiBSZXNwb25zZSkge1xuLy8gICAgICAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc3BvbnNlLCBcInVybFwiLCB7XG4vLyAgICAgICAgICAgZ2V0OiAoKSA9PiByZXF1ZXN0LnVybCxcbi8vICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbi8vICAgICAgICAgfSk7XG4vLyAgICAgICB9XG4vLyAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4vLyAgICAgfSxcbi8vICAgKTtcbi8vIH1cblxuZXhwb3J0IGZ1bmN0aW9uIHhmZXRjaChcbiAgaW5wdXQ6XG4gICAgfCBzdHJpbmdcbiAgICB8IFhSZXF1ZXN0PFhSZXF1ZXN0TWV0aG9kLCBYUmVxdWVzdElucHV0LCBYUmVxdWVzdEluaXQ+XG4gICAgfCBSZXF1ZXN0XG4gICAgfCBVUkwsXG4gIGluaXQ/OiBSZXF1ZXN0SW5pdCxcbik6IFByb21pc2U8UmVzcG9uc2U+IHtcbiAgLy8gQHRzLWlnbm9yZSAuXG4gIGNvbnN0IGZldGNoID0geGZldGNoLmZldGNoIGFzIHR5cGVvZiBnbG9iYWxUaGlzLmZldGNoIHx8IGdsb2JhbFRoaXMuZmV0Y2g7XG5cbiAgY29uc3QgcmVxdWVzdCA9IGlucHV0IGluc3RhbmNlb2YgWFJlcXVlc3QgPyBpbnB1dCA6ICgoYmFzZT86IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IHVybCA9IGJhc2UgJiYgdHlwZW9mIGlucHV0ID09PSBcInN0cmluZ1wiXG4gICAgICA/IFN0cmluZyhuZXcgVVJMKGlucHV0LCBiYXNlKSlcbiAgICAgIDogU3RyaW5nKGlucHV0IHx8IFwiL1wiKTtcblxuICAgIHJldHVybiBjcmVhdGVSZXF1ZXN0KGluaXQ/Lm1ldGhvZCBhcyBYUmVxdWVzdE1ldGhvZCwgdXJsLCBpbml0KTtcbiAgfSkoYmFzZVVSTCk7XG5cbiAgaWYgKHJlcXVlc3QuZHVwbGV4ID09PSBcImhhbGZcIikge1xuICAgIGNvbnNvbGUubG9nKFwiKHJlcXVpcmVGdWxsRHVwbGV4KVwiKTtcblxuICAgIGZldGNoKHJlcXVlc3QsIHtcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgLi4uT2JqZWN0LmZyb21FbnRyaWVzKHJlcXVlc3QuaGVhZGVycy5lbnRyaWVzKCkpLFxuICAgICAgICBbU1RSRUFNX1RZUEVfS0VZXTogU1RSRUFNX1RZUEUuUkVRVUVTVCxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZmV0Y2goXG4gICAgICBuZXcgWFJlcXVlc3QocmVxdWVzdC5tZXRob2QsIHJlcXVlc3QudXJsLCB7XG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAuLi5PYmplY3QuZnJvbUVudHJpZXMocmVxdWVzdC5oZWFkZXJzLmVudHJpZXMoKSksXG4gICAgICAgICAgW1NUUkVBTV9UWVBFX0tFWV06IFNUUkVBTV9UWVBFLlJFU1BPTlNFLFxuICAgICAgICB9LFxuICAgICAgfSksXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmxvZyhcIihGdWxsRHVwbGV4IFN1cHBvcnRlZClcIik7XG5cbiAgICByZXR1cm4gZmV0Y2gocmVxdWVzdCk7XG4gIH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7O0FBQUEsU0FBUyxnQkFBZ0I7QUFDekIsU0FBUyxhQUFhLHVCQUF1QjtBQUM3QztBQUFBLEVBQ0U7QUFBQSxFQUNBO0FBQUEsT0FJSztBQW9CQSxTQUFTLE9BQ2QsT0FLQSxNQUNtQjtBQUVuQixRQUFNLFFBQVEsT0FBTyxTQUFvQyxXQUFXO0FBRXBFLFFBQU0sVUFBVSxpQkFBaUIsV0FBVyxTQUFTLENBQUMsU0FBa0I7QUFDdEUsVUFBTSxNQUFNLFFBQVEsT0FBTyxVQUFVLFdBQ2pDLE9BQU8sSUFBSSxJQUFJLE9BQU8sSUFBSSxDQUFDLElBQzNCLE9BQU8sU0FBUyxHQUFHO0FBRXZCLFdBQU8sY0FBYyxNQUFNLFFBQTBCLEtBQUssSUFBSTtBQUFBLEVBQ2hFLEdBQUcsT0FBTztBQUVWLE1BQUksUUFBUSxXQUFXLFFBQVE7QUFDN0IsWUFBUSxJQUFJLHFCQUFxQjtBQUVqQyxVQUFNLFNBQVM7QUFBQSxNQUNiLFNBQVM7QUFBQSxRQUNQLEdBQUcsT0FBTyxZQUFZLFFBQVEsUUFBUSxRQUFRLENBQUM7QUFBQSxRQUMvQyxDQUFDLGVBQWUsR0FBRyxZQUFZO0FBQUEsTUFDakM7QUFBQSxJQUNGLENBQUM7QUFFRCxXQUFPO0FBQUEsTUFDTCxJQUFJLFNBQVMsUUFBUSxRQUFRLFFBQVEsS0FBSztBQUFBLFFBQ3hDLFNBQVM7QUFBQSxVQUNQLEdBQUcsT0FBTyxZQUFZLFFBQVEsUUFBUSxRQUFRLENBQUM7QUFBQSxVQUMvQyxDQUFDLGVBQWUsR0FBRyxZQUFZO0FBQUEsUUFDakM7QUFBQSxNQUNGLENBQUM7QUFBQSxJQUNIO0FBQUEsRUFDRixPQUFPO0FBQ0wsWUFBUSxJQUFJLHdCQUF3QjtBQUVwQyxXQUFPLE1BQU0sT0FBTztBQUFBLEVBQ3RCO0FBQ0Y7QUExQ2dCOyIsCiAgIm5hbWVzIjogW10KfQo=
