var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
import { STREAM_ID_KEY, STREAM_TYPE, STREAM_TYPE_KEY } from "./handle.ts";
class XRequest extends Request {
  static {
    __name(this, "XRequest");
  }
  get duplex() {
    return this.#duplex;
  }
  // get requireFullDuplex() {
  //   return this.#requireFullDuplex;
  // }
  // #requireFullDuplex: boolean = false;
  #duplex = void 0;
  constructor(method, input, init) {
    const _isBrowser = Reflect.has(globalThis, "document");
    const _isDeno = Reflect.has(globalThis, "Deno");
    const _isBun = Reflect.has(globalThis, "Bun");
    const isStreamingBodyRequest = init?.body instanceof ReadableStream && method !== "GET" && method !== "HEAD";
    if (isStreamingBodyRequest) {
      if (_isDeno) {
        Object.assign(init, { duplex: "full" });
      } else {
        Object.assign(init, { duplex: "half" });
      }
    }
    super(input, { ...init, method: method === "*" ? void 0 : method });
    this.#duplex = init?.duplex;
    if (this.#duplex === "half") {
      this.headers.set(STREAM_ID_KEY, Math.random().toString().slice(2));
      this.headers.set(STREAM_TYPE_KEY, STREAM_TYPE.REQUEST);
      this[STREAM_TYPE_KEY] = STREAM_TYPE.REQUEST;
    } else {
      if (this.headers.has(STREAM_ID_KEY)) {
        if (this.headers.get(STREAM_TYPE_KEY) === STREAM_TYPE.REQUEST) {
          this.headers.set(STREAM_TYPE_KEY, STREAM_TYPE.RESPONSE);
          this[STREAM_TYPE_KEY] = STREAM_TYPE.RESPONSE;
        }
      }
    }
  }
}
export {
  XRequest
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vdHJhbnNwb3J0L1hSZXF1ZXN0LnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgeyBTVFJFQU1fSURfS0VZLCBTVFJFQU1fVFlQRSwgU1RSRUFNX1RZUEVfS0VZIH0gZnJvbSBcIi4vaGFuZGxlLnRzXCI7XG5pbXBvcnQgdHlwZSB7XG4gIFVSTFN0cmluZyxcbiAgWFJlcXVlc3RJbml0LFxuICBYUmVxdWVzdElucHV0LFxuICBYUmVxdWVzdE1ldGhvZCxcbn0gZnJvbSBcIi4vYXBpLnRzXCI7XG5cbmV4cG9ydCBjbGFzcyBYUmVxdWVzdDxcbiAgTSBleHRlbmRzIFhSZXF1ZXN0TWV0aG9kLFxuICBVIGV4dGVuZHMgWFJlcXVlc3RJbnB1dCxcbiAgSSBleHRlbmRzIFhSZXF1ZXN0SW5pdCxcbj4gZXh0ZW5kcyBSZXF1ZXN0IHtcbiAgZGVjbGFyZSB1cmw6IFVSTFN0cmluZzxVPjtcbiAgZGVjbGFyZSBtZXRob2Q6IE07XG4gIGRlY2xhcmUgYm9keTogSVtcImJvZHlcIl0gZXh0ZW5kcyBSZWFkYWJsZVN0cmVhbSA/IElbXCJib2R5XCJdIDogbnVsbDtcbiAgZGVjbGFyZSBbU1RSRUFNX1RZUEVfS0VZXTogU1RSRUFNX1RZUEU7XG5cbiAgZ2V0IGR1cGxleCgpIHtcbiAgICByZXR1cm4gdGhpcy4jZHVwbGV4O1xuICB9XG5cbiAgLy8gZ2V0IHJlcXVpcmVGdWxsRHVwbGV4KCkge1xuICAvLyAgIHJldHVybiB0aGlzLiNyZXF1aXJlRnVsbER1cGxleDtcbiAgLy8gfVxuICAvLyAjcmVxdWlyZUZ1bGxEdXBsZXg6IGJvb2xlYW4gPSBmYWxzZTtcbiAgI2R1cGxleDogXCJoYWxmXCIgfCBcImZ1bGxcIiB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuICBjb25zdHJ1Y3RvcihtZXRob2Q6IE0sIGlucHV0OiBVLCBpbml0PzogSSkge1xuICAgIGNvbnN0IF9pc0Jyb3dzZXIgPSBSZWZsZWN0LmhhcyhnbG9iYWxUaGlzLCBcImRvY3VtZW50XCIpO1xuICAgIGNvbnN0IF9pc0Rlbm8gPSBSZWZsZWN0LmhhcyhnbG9iYWxUaGlzLCBcIkRlbm9cIik7XG4gICAgY29uc3QgX2lzQnVuID0gUmVmbGVjdC5oYXMoZ2xvYmFsVGhpcywgXCJCdW5cIik7XG4gICAgY29uc3QgaXNTdHJlYW1pbmdCb2R5UmVxdWVzdCA9IGluaXQ/LmJvZHkgaW5zdGFuY2VvZiBSZWFkYWJsZVN0cmVhbSAmJlxuICAgICAgbWV0aG9kICE9PSBcIkdFVFwiICYmIG1ldGhvZCAhPT0gXCJIRUFEXCI7XG5cbiAgICBpZiAoaXNTdHJlYW1pbmdCb2R5UmVxdWVzdCkge1xuICAgICAgaWYgKF9pc0Rlbm8pIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihpbml0LCB7IGR1cGxleDogXCJmdWxsXCIgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBPYmplY3QuYXNzaWduKGluaXQsIHsgZHVwbGV4OiBcImhhbGZcIiB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzdXBlcihpbnB1dCwgeyAuLi5pbml0LCBtZXRob2Q6IG1ldGhvZCA9PT0gXCIqXCIgPyB1bmRlZmluZWQgOiBtZXRob2QgfSk7XG5cbiAgICAvLyBAdHMtaWdub3JlIC5cbiAgICB0aGlzLiNkdXBsZXggPSBpbml0Py5kdXBsZXg7XG5cbiAgICBpZiAodGhpcy4jZHVwbGV4ID09PSBcImhhbGZcIikge1xuICAgICAgdGhpcy5oZWFkZXJzLnNldChTVFJFQU1fSURfS0VZLCBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKCkuc2xpY2UoMikpO1xuICAgICAgdGhpcy5oZWFkZXJzLnNldChTVFJFQU1fVFlQRV9LRVksIFNUUkVBTV9UWVBFLlJFUVVFU1QpO1xuICAgICAgdGhpc1tTVFJFQU1fVFlQRV9LRVldID0gU1RSRUFNX1RZUEUuUkVRVUVTVDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuaGVhZGVycy5oYXMoU1RSRUFNX0lEX0tFWSkpIHtcbiAgICAgICAgaWYgKHRoaXMuaGVhZGVycy5nZXQoU1RSRUFNX1RZUEVfS0VZKSA9PT0gU1RSRUFNX1RZUEUuUkVRVUVTVCkge1xuICAgICAgICAgIHRoaXMuaGVhZGVycy5zZXQoU1RSRUFNX1RZUEVfS0VZLCBTVFJFQU1fVFlQRS5SRVNQT05TRSk7XG4gICAgICAgICAgdGhpc1tTVFJFQU1fVFlQRV9LRVldID0gU1RSRUFNX1RZUEUuUkVTUE9OU0U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7O0FBQUEsU0FBUyxlQUFlLGFBQWEsdUJBQXVCO0FBUXJELE1BQU0saUJBSUgsUUFBUTtBQUFBLEVBWmxCLE9BWWtCO0FBQUE7QUFBQTtBQUFBLEVBTWhCLElBQUksU0FBUztBQUNYLFdBQU8sS0FBSztBQUFBLEVBQ2Q7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsVUFBdUM7QUFBQSxFQUV2QyxZQUFZLFFBQVcsT0FBVSxNQUFVO0FBQ3pDLFVBQU0sYUFBYSxRQUFRLElBQUksWUFBWSxVQUFVO0FBQ3JELFVBQU0sVUFBVSxRQUFRLElBQUksWUFBWSxNQUFNO0FBQzlDLFVBQU0sU0FBUyxRQUFRLElBQUksWUFBWSxLQUFLO0FBQzVDLFVBQU0seUJBQXlCLE1BQU0sZ0JBQWdCLGtCQUNuRCxXQUFXLFNBQVMsV0FBVztBQUVqQyxRQUFJLHdCQUF3QjtBQUMxQixVQUFJLFNBQVM7QUFDWCxlQUFPLE9BQU8sTUFBTSxFQUFFLFFBQVEsT0FBTyxDQUFDO0FBQUEsTUFDeEMsT0FBTztBQUNMLGVBQU8sT0FBTyxNQUFNLEVBQUUsUUFBUSxPQUFPLENBQUM7QUFBQSxNQUN4QztBQUFBLElBQ0Y7QUFFQSxVQUFNLE9BQU8sRUFBRSxHQUFHLE1BQU0sUUFBUSxXQUFXLE1BQU0sU0FBWSxPQUFPLENBQUM7QUFHckUsU0FBSyxVQUFVLE1BQU07QUFFckIsUUFBSSxLQUFLLFlBQVksUUFBUTtBQUMzQixXQUFLLFFBQVEsSUFBSSxlQUFlLEtBQUssT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNqRSxXQUFLLFFBQVEsSUFBSSxpQkFBaUIsWUFBWSxPQUFPO0FBQ3JELFdBQUssZUFBZSxJQUFJLFlBQVk7QUFBQSxJQUN0QyxPQUFPO0FBQ0wsVUFBSSxLQUFLLFFBQVEsSUFBSSxhQUFhLEdBQUc7QUFDbkMsWUFBSSxLQUFLLFFBQVEsSUFBSSxlQUFlLE1BQU0sWUFBWSxTQUFTO0FBQzdELGVBQUssUUFBUSxJQUFJLGlCQUFpQixZQUFZLFFBQVE7QUFDdEQsZUFBSyxlQUFlLElBQUksWUFBWTtBQUFBLFFBQ3RDO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBQ0Y7IiwKICAibmFtZXMiOiBbXQp9Cg==
