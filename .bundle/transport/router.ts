var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var METHOD = /* @__PURE__ */ ((METHOD2) => {
  METHOD2["GET"] = "GET";
  METHOD2["HEAD"] = "HEAD";
  METHOD2["POST"] = "POST";
  METHOD2["PUT"] = "PUT";
  METHOD2["DELETE"] = "DELETE";
  METHOD2["OPTIONS"] = "OPTIONS";
  METHOD2["TRACE"] = "TRACE";
  METHOD2["PATCH"] = "PATCH";
  METHOD2["ANY"] = "ANY";
  return METHOD2;
})(METHOD || {});
class Route {
  static {
    __name(this, "Route");
  }
  static METHOD = METHOD;
  method;
  pattern;
  handler;
  constructor(method, pattern, handler) {
    if (!METHOD[method]) {
      throw new TypeError(
        `Invalid method: ${method}. Valid: ${Object.keys(Route.METHOD)}`
      );
    }
    this.method = method;
    this.handler = handler;
    this.pattern = typeof pattern === "string" ? new URLPattern({ pathname: pattern }) : new URLPattern(pattern);
  }
  get [Symbol.toStringTag]() {
    return this.constructor.name;
  }
  *[Symbol.iterator]() {
    yield this.method;
    yield this.pattern.pathname;
    yield this.handler;
  }
}
async function routerFromPath(root) {
  if (typeof globalThis.Deno === "undefined") {
    throw new TypeError(`Not implmented for current environment`);
  }
  const { walk } = await import("jsr:@std/fs@^0.223.0/walk");
  const path = await import("https://deno.land/std@0.224.0/path/mod.ts");
  Object.assign(globalThis, { path });
  const routes = [];
  try {
    for await (const dirEntry of walk(root, { exts: ["ts"] })) {
      if (dirEntry.isFile) {
        const a = dirEntry.name.split(".");
        const method = a.length > 2 ? a.shift()?.toUpperCase() : "ANY" /* ANY */;
        const pathname = "/" + dirEntry.path.slice(0, -3);
        const path2 = import.meta.resolve("../" + dirEntry.path);
        const handler = await import(path2).then(
          (mod) => mod.default?.fetch
        );
        routes.push(new Route(method, { pathname }, handler));
      }
    }
  } catch (e) {
    console.warn(e);
    return routes;
  }
  return routes;
}
__name(routerFromPath, "routerFromPath");
class Router {
  constructor(events) {
    this.events = events;
  }
  static {
    __name(this, "Router");
  }
  static async fromPath(root) {
    const routes = await routerFromPath(root);
    const router = new Router();
    router.routes = routes;
    return router;
  }
  routes = [];
  add(method, pattern, handler) {
    this.routes.push(new Route(method, pattern, handler));
    return this;
  }
  method(method) {
    return (pattern, handler) => this.add(method, pattern, handler);
  }
  async match(request) {
    if (this.events?.onRequest) {
      await this.events.onRequest(request, { routes: this.routes });
    }
    for (const route of this.routes) {
      if (route.method === "ANY" /* ANY */ || request.method === route.method) {
        const match = route.pattern.exec(request.url);
        if (match) {
          if (this.events?.onMatch) {
            await this.events.onMatch(request, {
              routes: this.routes,
              route,
              match
            });
          }
          const response = await route.handler(
            request,
            match.pathname.groups,
            match
          );
          if (response instanceof Response) {
            if (this.events?.onResponse) {
              await this.events.onResponse(request, {
                routes: this.routes,
                route,
                match,
                response
              });
            }
            return response;
          }
        }
      }
    }
  }
  [Symbol.iterator]() {
    return this.routes.values();
  }
  // define methods
  delete = this.method("DELETE" /* DELETE */);
  get = this.method("GET" /* GET */);
  head = this.method("HEAD" /* HEAD */);
  options = this.method("OPTIONS" /* OPTIONS */);
  patch = this.method("PATCH" /* PATCH */);
  post = this.method("POST" /* POST */);
  put = this.method("PUT" /* PUT */);
  trace = this.method("TRACE" /* TRACE */);
  any = this.method("ANY" /* ANY */);
  // main
  handle = (request) => this.match(request);
}
export {
  METHOD,
  Route,
  Router,
  routerFromPath
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vdHJhbnNwb3J0L3JvdXRlci50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiZXhwb3J0IHR5cGUgVVJMUGF0dGVyblJlc3VsdFBhcmFtcyA9IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgdW5kZWZpbmVkIH07XG5cbmV4cG9ydCBlbnVtIE1FVEhPRCB7XG4gIEdFVCA9IFwiR0VUXCIsXG4gIEhFQUQgPSBcIkhFQURcIixcbiAgUE9TVCA9IFwiUE9TVFwiLFxuICBQVVQgPSBcIlBVVFwiLFxuICBERUxFVEUgPSBcIkRFTEVURVwiLFxuICBPUFRJT05TID0gXCJPUFRJT05TXCIsXG4gIFRSQUNFID0gXCJUUkFDRVwiLFxuICBQQVRDSCA9IFwiUEFUQ0hcIixcbiAgQU5ZID0gXCJBTllcIixcbn1cblxuZXhwb3J0IHR5cGUgUm91dGVNZXRob2QgPSBNRVRIT0Q7XG5cbmV4cG9ydCB0eXBlIFJvdXRlSGFuZGxlciA9IChcbiAgcmVxdWVzdDogUmVxdWVzdCxcbiAgcGFyYW1zOiBVUkxQYXR0ZXJuUmVzdWx0UGFyYW1zLFxuICB1cmxQYXR0ZXJuUmVzdWx0OiBVUkxQYXR0ZXJuUmVzdWx0LFxuKSA9PiBSZXNwb25zZSB8IFByb21pc2U8UmVzcG9uc2UgfCB1bmRlZmluZWQ+IHwgdW5kZWZpbmVkO1xuXG5leHBvcnQgY2xhc3MgUm91dGU8XG4gIE0gZXh0ZW5kcyBSb3V0ZU1ldGhvZCxcbiAgUCBleHRlbmRzIFVSTFBhdHRlcm5JbnB1dCxcbiAgSCBleHRlbmRzIFJvdXRlSGFuZGxlcixcbj4ge1xuICBzdGF0aWMgTUVUSE9EID0gTUVUSE9EO1xuXG4gIHB1YmxpYyBtZXRob2Q6IE07XG4gIHB1YmxpYyBwYXR0ZXJuOiBVUkxQYXR0ZXJuO1xuICBwdWJsaWMgaGFuZGxlcjogSDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBtZXRob2Q6IE0sXG4gICAgcGF0dGVybjogUCxcbiAgICBoYW5kbGVyOiBILFxuICApIHtcbiAgICBpZiAoIU1FVEhPRFttZXRob2RdKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICBgSW52YWxpZCBtZXRob2Q6ICR7bWV0aG9kfS4gVmFsaWQ6ICR7T2JqZWN0LmtleXMoUm91dGUuTUVUSE9EKX1gLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLm1ldGhvZCA9IG1ldGhvZDtcbiAgICB0aGlzLmhhbmRsZXIgPSBoYW5kbGVyO1xuICAgIHRoaXMucGF0dGVybiA9IHR5cGVvZiBwYXR0ZXJuID09PSBcInN0cmluZ1wiXG4gICAgICA/IG5ldyBVUkxQYXR0ZXJuKHsgcGF0aG5hbWU6IHBhdHRlcm4gfSlcbiAgICAgIDogbmV3IFVSTFBhdHRlcm4ocGF0dGVybik7XG4gIH1cblxuICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgfVxuXG4gICpbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICB5aWVsZCB0aGlzLm1ldGhvZDtcbiAgICB5aWVsZCB0aGlzLnBhdHRlcm4ucGF0aG5hbWU7XG4gICAgeWllbGQgdGhpcy5oYW5kbGVyO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByb3V0ZXJGcm9tUGF0aChyb290OiBzdHJpbmcgfCBVUkwpIHtcbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzLkRlbm8gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBOb3QgaW1wbG1lbnRlZCBmb3IgY3VycmVudCBlbnZpcm9ubWVudGApO1xuICB9XG5cbiAgY29uc3QgeyB3YWxrIH0gPSBhd2FpdCBpbXBvcnQoXCJqc3I6QHN0ZC9mc0BeMC4yMjMuMC93YWxrXCIpO1xuICBjb25zdCBwYXRoID0gYXdhaXQgaW1wb3J0KFwiaHR0cHM6Ly9kZW5vLmxhbmQvc3RkQDAuMjI0LjAvcGF0aC9tb2QudHNcIik7XG4gIE9iamVjdC5hc3NpZ24oZ2xvYmFsVGhpcywgeyBwYXRoIH0pO1xuXG4gIGNvbnN0IHJvdXRlczogUm91dGU8Um91dGVNZXRob2QsIFVSTFBhdHRlcm5JbnB1dCwgUm91dGVIYW5kbGVyPltdID0gW107XG5cbiAgdHJ5IHtcbiAgICBmb3IgYXdhaXQgKGNvbnN0IGRpckVudHJ5IG9mIHdhbGsocm9vdCwgeyBleHRzOiBbXCJ0c1wiXSB9KSkge1xuICAgICAgaWYgKGRpckVudHJ5LmlzRmlsZSkge1xuICAgICAgICBjb25zdCBhID0gZGlyRW50cnkubmFtZS5zcGxpdChcIi5cIik7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IGEubGVuZ3RoID4gMlxuICAgICAgICAgID8gYS5zaGlmdCgpPy50b1VwcGVyQ2FzZSgpIGFzIFJvdXRlTWV0aG9kXG4gICAgICAgICAgOiBNRVRIT0QuQU5ZO1xuXG4gICAgICAgIGNvbnN0IHBhdGhuYW1lID0gXCIvXCIgKyBkaXJFbnRyeS5wYXRoLnNsaWNlKDAsIC0zKTtcbiAgICAgICAgY29uc3QgcGF0aCA9IGltcG9ydC5tZXRhLnJlc29sdmUoXCIuLi9cIiArIGRpckVudHJ5LnBhdGgpO1xuICAgICAgICBjb25zdCBoYW5kbGVyID0gYXdhaXQgaW1wb3J0KHBhdGgpLnRoZW4oKG1vZCkgPT5cbiAgICAgICAgICBtb2QuZGVmYXVsdD8uZmV0Y2ggYXMgUm91dGVIYW5kbGVyXG4gICAgICAgICk7XG5cbiAgICAgICAgcm91dGVzLnB1c2gobmV3IFJvdXRlKG1ldGhvZCwgeyBwYXRobmFtZSB9LCBoYW5kbGVyKSk7XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS53YXJuKGUpO1xuICAgIHJldHVybiByb3V0ZXM7XG4gIH1cblxuICByZXR1cm4gcm91dGVzO1xufVxuXG5leHBvcnQgY2xhc3MgUm91dGVyIHtcbiAgc3RhdGljIGFzeW5jIGZyb21QYXRoKHJvb3Q6IHN0cmluZyB8IFVSTCkge1xuICAgIGNvbnN0IHJvdXRlcyA9IGF3YWl0IHJvdXRlckZyb21QYXRoKHJvb3QpO1xuICAgIGNvbnN0IHJvdXRlciA9IG5ldyBSb3V0ZXIoKTtcbiAgICByb3V0ZXIucm91dGVzID0gcm91dGVzO1xuXG4gICAgcmV0dXJuIHJvdXRlcjtcbiAgfVxuXG4gIHJvdXRlczogUm91dGU8Um91dGVNZXRob2QsIFVSTFBhdHRlcm4sIFJvdXRlSGFuZGxlcj5bXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBldmVudHM/OiB7XG4gICAgICBvblJlcXVlc3Q/KFxuICAgICAgICByZXF1ZXN0OiBSZXF1ZXN0LFxuICAgICAgICBjb250ZXh0OiB7IHJvdXRlczogUm91dGU8TUVUSE9ELCBVUkxQYXR0ZXJuLCBSb3V0ZUhhbmRsZXI+W10gfSxcbiAgICAgICk6IHVua25vd247XG4gICAgICBvbk1hdGNoPyhcbiAgICAgICAgcmVxdWVzdDogUmVxdWVzdCxcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgIHJvdXRlczogUm91dGU8TUVUSE9ELCBVUkxQYXR0ZXJuLCBSb3V0ZUhhbmRsZXI+W107XG4gICAgICAgICAgcm91dGU6IFJvdXRlPE1FVEhPRCwgVVJMUGF0dGVybiwgUm91dGVIYW5kbGVyPjtcbiAgICAgICAgICBtYXRjaDogVVJMUGF0dGVyblJlc3VsdDtcbiAgICAgICAgfSxcbiAgICAgICk6IHVua25vd247XG4gICAgICBvblJlc3BvbnNlPyhcbiAgICAgICAgcmVxdWVzdDogUmVxdWVzdCxcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgIHJvdXRlczogUm91dGU8TUVUSE9ELCBVUkxQYXR0ZXJuLCBSb3V0ZUhhbmRsZXI+W107XG4gICAgICAgICAgcm91dGU6IFJvdXRlPE1FVEhPRCwgVVJMUGF0dGVybiwgUm91dGVIYW5kbGVyPjtcbiAgICAgICAgICBtYXRjaDogVVJMUGF0dGVyblJlc3VsdDtcbiAgICAgICAgICByZXNwb25zZTogUmVzcG9uc2U7XG4gICAgICAgIH0sXG4gICAgICApOiB1bmtub3duO1xuICAgIH0sXG4gICkge1xuICB9XG5cbiAgcHJpdmF0ZSBhZGQoXG4gICAgbWV0aG9kOiBSb3V0ZU1ldGhvZCxcbiAgICBwYXR0ZXJuOiBVUkxQYXR0ZXJuSW5wdXQsXG4gICAgaGFuZGxlcjogUm91dGVIYW5kbGVyLFxuICApOiBSb3V0ZXIge1xuICAgIHRoaXMucm91dGVzLnB1c2gobmV3IFJvdXRlKG1ldGhvZCwgcGF0dGVybiwgaGFuZGxlcikpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBwcml2YXRlIG1ldGhvZChtZXRob2Q6IFJvdXRlTWV0aG9kKSB7XG4gICAgcmV0dXJuIChwYXR0ZXJuOiBVUkxQYXR0ZXJuSW5wdXQsIGhhbmRsZXI6IFJvdXRlSGFuZGxlcikgPT5cbiAgICAgIHRoaXMuYWRkKG1ldGhvZCwgcGF0dGVybiwgaGFuZGxlcik7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIG1hdGNoKHJlcXVlc3Q6IFJlcXVlc3QpIHtcbiAgICBpZiAodGhpcy5ldmVudHM/Lm9uUmVxdWVzdCkge1xuICAgICAgYXdhaXQgdGhpcy5ldmVudHMub25SZXF1ZXN0KHJlcXVlc3QsIHsgcm91dGVzOiB0aGlzLnJvdXRlcyB9KTtcbiAgICB9XG4gICAgZm9yIChjb25zdCByb3V0ZSBvZiB0aGlzLnJvdXRlcykge1xuICAgICAgaWYgKHJvdXRlLm1ldGhvZCA9PT0gTUVUSE9ELkFOWSB8fCByZXF1ZXN0Lm1ldGhvZCA9PT0gcm91dGUubWV0aG9kKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gcm91dGUucGF0dGVybi5leGVjKHJlcXVlc3QudXJsKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZXZlbnRzPy5vbk1hdGNoKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmV2ZW50cy5vbk1hdGNoKHJlcXVlc3QsIHtcbiAgICAgICAgICAgICAgcm91dGVzOiB0aGlzLnJvdXRlcyxcbiAgICAgICAgICAgICAgcm91dGUsXG4gICAgICAgICAgICAgIG1hdGNoLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByb3V0ZS5oYW5kbGVyKFxuICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgIG1hdGNoLnBhdGhuYW1lLmdyb3VwcyxcbiAgICAgICAgICAgIG1hdGNoLFxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBpZiAocmVzcG9uc2UgaW5zdGFuY2VvZiBSZXNwb25zZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZXZlbnRzPy5vblJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgIGF3YWl0IHRoaXMuZXZlbnRzLm9uUmVzcG9uc2UocmVxdWVzdCwge1xuICAgICAgICAgICAgICAgIHJvdXRlczogdGhpcy5yb3V0ZXMsXG4gICAgICAgICAgICAgICAgcm91dGUsXG4gICAgICAgICAgICAgICAgbWF0Y2gsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIHJldHVybiB0aGlzLnJvdXRlcy52YWx1ZXMoKTtcbiAgfVxuXG4gIC8vIGRlZmluZSBtZXRob2RzXG4gIGRlbGV0ZSA9IHRoaXMubWV0aG9kKE1FVEhPRC5ERUxFVEUpO1xuICBnZXQgPSB0aGlzLm1ldGhvZChNRVRIT0QuR0VUKTtcbiAgaGVhZCA9IHRoaXMubWV0aG9kKE1FVEhPRC5IRUFEKTtcbiAgb3B0aW9ucyA9IHRoaXMubWV0aG9kKE1FVEhPRC5PUFRJT05TKTtcbiAgcGF0Y2ggPSB0aGlzLm1ldGhvZChNRVRIT0QuUEFUQ0gpO1xuICBwb3N0ID0gdGhpcy5tZXRob2QoTUVUSE9ELlBPU1QpO1xuICBwdXQgPSB0aGlzLm1ldGhvZChNRVRIT0QuUFVUKTtcbiAgdHJhY2UgPSB0aGlzLm1ldGhvZChNRVRIT0QuVFJBQ0UpO1xuICBhbnkgPSB0aGlzLm1ldGhvZChNRVRIT0QuQU5ZKTtcblxuICAvLyBtYWluXG4gIGhhbmRsZSA9IChyZXF1ZXN0OiBSZXF1ZXN0KSA9PiB0aGlzLm1hdGNoKHJlcXVlc3QpO1xufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7QUFFTyxJQUFLLFNBQUwsa0JBQUtBLFlBQUw7QUFDTCxFQUFBQSxRQUFBLFNBQU07QUFDTixFQUFBQSxRQUFBLFVBQU87QUFDUCxFQUFBQSxRQUFBLFVBQU87QUFDUCxFQUFBQSxRQUFBLFNBQU07QUFDTixFQUFBQSxRQUFBLFlBQVM7QUFDVCxFQUFBQSxRQUFBLGFBQVU7QUFDVixFQUFBQSxRQUFBLFdBQVE7QUFDUixFQUFBQSxRQUFBLFdBQVE7QUFDUixFQUFBQSxRQUFBLFNBQU07QUFUSSxTQUFBQTtBQUFBLEdBQUE7QUFvQkwsTUFBTSxNQUlYO0FBQUEsRUExQkYsT0EwQkU7QUFBQTtBQUFBO0FBQUEsRUFDQSxPQUFPLFNBQVM7QUFBQSxFQUVUO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUVQLFlBQ0UsUUFDQSxTQUNBLFNBQ0E7QUFDQSxRQUFJLENBQUMsT0FBTyxNQUFNLEdBQUc7QUFDbkIsWUFBTSxJQUFJO0FBQUEsUUFDUixtQkFBbUIsTUFBTSxZQUFZLE9BQU8sS0FBSyxNQUFNLE1BQU0sQ0FBQztBQUFBLE1BQ2hFO0FBQUEsSUFDRjtBQUVBLFNBQUssU0FBUztBQUNkLFNBQUssVUFBVTtBQUNmLFNBQUssVUFBVSxPQUFPLFlBQVksV0FDOUIsSUFBSSxXQUFXLEVBQUUsVUFBVSxRQUFRLENBQUMsSUFDcEMsSUFBSSxXQUFXLE9BQU87QUFBQSxFQUM1QjtBQUFBLEVBRUEsS0FBSyxPQUFPLFdBQVcsSUFBSTtBQUN6QixXQUFPLEtBQUssWUFBWTtBQUFBLEVBQzFCO0FBQUEsRUFFQSxFQUFFLE9BQU8sUUFBUSxJQUFJO0FBQ25CLFVBQU0sS0FBSztBQUNYLFVBQU0sS0FBSyxRQUFRO0FBQ25CLFVBQU0sS0FBSztBQUFBLEVBQ2I7QUFDRjtBQUVBLGVBQXNCLGVBQWUsTUFBb0I7QUFDdkQsTUFBSSxPQUFPLFdBQVcsU0FBUyxhQUFhO0FBQzFDLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUFBLEVBQzlEO0FBRUEsUUFBTSxFQUFFLEtBQUssSUFBSSxNQUFNLE9BQU8sMkJBQTJCO0FBQ3pELFFBQU0sT0FBTyxNQUFNLE9BQU8sMkNBQTJDO0FBQ3JFLFNBQU8sT0FBTyxZQUFZLEVBQUUsS0FBSyxDQUFDO0FBRWxDLFFBQU0sU0FBOEQsQ0FBQztBQUVyRSxNQUFJO0FBQ0YscUJBQWlCLFlBQVksS0FBSyxNQUFNLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUc7QUFDekQsVUFBSSxTQUFTLFFBQVE7QUFDbkIsY0FBTSxJQUFJLFNBQVMsS0FBSyxNQUFNLEdBQUc7QUFDakMsY0FBTSxTQUFTLEVBQUUsU0FBUyxJQUN0QixFQUFFLE1BQU0sR0FBRyxZQUFZLElBQ3ZCO0FBRUosY0FBTSxXQUFXLE1BQU0sU0FBUyxLQUFLLE1BQU0sR0FBRyxFQUFFO0FBQ2hELGNBQU1DLFFBQU8sWUFBWSxRQUFRLFFBQVEsU0FBUyxJQUFJO0FBQ3RELGNBQU0sVUFBVSxNQUFNLE9BQU9BLE9BQU07QUFBQSxVQUFLLENBQUMsUUFDdkMsSUFBSSxTQUFTO0FBQUEsUUFDZjtBQUVBLGVBQU8sS0FBSyxJQUFJLE1BQU0sUUFBUSxFQUFFLFNBQVMsR0FBRyxPQUFPLENBQUM7QUFBQSxNQUN0RDtBQUFBLElBQ0Y7QUFBQSxFQUNGLFNBQVMsR0FBRztBQUNWLFlBQVEsS0FBSyxDQUFDO0FBQ2QsV0FBTztBQUFBLEVBQ1Q7QUFFQSxTQUFPO0FBQ1Q7QUFsQ3NCO0FBb0NmLE1BQU0sT0FBTztBQUFBLEVBV2xCLFlBQ1MsUUF1QlA7QUF2Qk87QUFBQSxFQXdCVDtBQUFBLEVBdElGLE9Ba0dvQjtBQUFBO0FBQUE7QUFBQSxFQUNsQixhQUFhLFNBQVMsTUFBb0I7QUFDeEMsVUFBTSxTQUFTLE1BQU0sZUFBZSxJQUFJO0FBQ3hDLFVBQU0sU0FBUyxJQUFJLE9BQU87QUFDMUIsV0FBTyxTQUFTO0FBRWhCLFdBQU87QUFBQSxFQUNUO0FBQUEsRUFFQSxTQUF5RCxDQUFDO0FBQUEsRUE2QmxELElBQ04sUUFDQSxTQUNBLFNBQ1E7QUFDUixTQUFLLE9BQU8sS0FBSyxJQUFJLE1BQU0sUUFBUSxTQUFTLE9BQU8sQ0FBQztBQUVwRCxXQUFPO0FBQUEsRUFDVDtBQUFBLEVBRVEsT0FBTyxRQUFxQjtBQUNsQyxXQUFPLENBQUMsU0FBMEIsWUFDaEMsS0FBSyxJQUFJLFFBQVEsU0FBUyxPQUFPO0FBQUEsRUFDckM7QUFBQSxFQUVBLE1BQWMsTUFBTSxTQUFrQjtBQUNwQyxRQUFJLEtBQUssUUFBUSxXQUFXO0FBQzFCLFlBQU0sS0FBSyxPQUFPLFVBQVUsU0FBUyxFQUFFLFFBQVEsS0FBSyxPQUFPLENBQUM7QUFBQSxJQUM5RDtBQUNBLGVBQVcsU0FBUyxLQUFLLFFBQVE7QUFDL0IsVUFBSSxNQUFNLFdBQVcsbUJBQWMsUUFBUSxXQUFXLE1BQU0sUUFBUTtBQUNsRSxjQUFNLFFBQVEsTUFBTSxRQUFRLEtBQUssUUFBUSxHQUFHO0FBQzVDLFlBQUksT0FBTztBQUNULGNBQUksS0FBSyxRQUFRLFNBQVM7QUFDeEIsa0JBQU0sS0FBSyxPQUFPLFFBQVEsU0FBUztBQUFBLGNBQ2pDLFFBQVEsS0FBSztBQUFBLGNBQ2I7QUFBQSxjQUNBO0FBQUEsWUFDRixDQUFDO0FBQUEsVUFDSDtBQUVBLGdCQUFNLFdBQVcsTUFBTSxNQUFNO0FBQUEsWUFDM0I7QUFBQSxZQUNBLE1BQU0sU0FBUztBQUFBLFlBQ2Y7QUFBQSxVQUNGO0FBRUEsY0FBSSxvQkFBb0IsVUFBVTtBQUNoQyxnQkFBSSxLQUFLLFFBQVEsWUFBWTtBQUMzQixvQkFBTSxLQUFLLE9BQU8sV0FBVyxTQUFTO0FBQUEsZ0JBQ3BDLFFBQVEsS0FBSztBQUFBLGdCQUNiO0FBQUEsZ0JBQ0E7QUFBQSxnQkFDQTtBQUFBLGNBQ0YsQ0FBQztBQUFBLFlBQ0g7QUFDQSxtQkFBTztBQUFBLFVBQ1Q7QUFBQSxRQUNGO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBQUEsRUFFQSxDQUFDLE9BQU8sUUFBUSxJQUFJO0FBQ2xCLFdBQU8sS0FBSyxPQUFPLE9BQU87QUFBQSxFQUM1QjtBQUFBO0FBQUEsRUFHQSxTQUFTLEtBQUssT0FBTyxxQkFBYTtBQUFBLEVBQ2xDLE1BQU0sS0FBSyxPQUFPLGVBQVU7QUFBQSxFQUM1QixPQUFPLEtBQUssT0FBTyxpQkFBVztBQUFBLEVBQzlCLFVBQVUsS0FBSyxPQUFPLHVCQUFjO0FBQUEsRUFDcEMsUUFBUSxLQUFLLE9BQU8sbUJBQVk7QUFBQSxFQUNoQyxPQUFPLEtBQUssT0FBTyxpQkFBVztBQUFBLEVBQzlCLE1BQU0sS0FBSyxPQUFPLGVBQVU7QUFBQSxFQUM1QixRQUFRLEtBQUssT0FBTyxtQkFBWTtBQUFBLEVBQ2hDLE1BQU0sS0FBSyxPQUFPLGVBQVU7QUFBQTtBQUFBLEVBRzVCLFNBQVMsQ0FBQyxZQUFxQixLQUFLLE1BQU0sT0FBTztBQUNuRDsiLAogICJuYW1lcyI6IFsiTUVUSE9EIiwgInBhdGgiXQp9Cg==
