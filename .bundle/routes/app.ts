import { readable, transform, transport } from "../mod.ts";
import { duplex, STREAM_ID_KEY } from "../transport/handle.ts";
import { Router } from "../transport/router.ts";
import _static from "../app/static.ts";
import "../global.ts";
import { STREAM_TYPE_KEY } from "../transport/mod.ts";
Object.assign(globalThis, transport);
const { get, post, patch, any, handle, routes } = new Router({
  onRequest(request, context) {
    if (request.url.endsWith("/echo")) {
      console.log(
        "onRequest",
        request.method,
        request.url,
        request,
        request.headers.get(STREAM_ID_KEY),
        request.headers.get("stream-x")
      );
    }
  },
  //   onMatch(request, context) {
  //     if (request.url.endsWith("/echo")) {
  //       console.log("onMatch", request.method, request.url, context.route);
  //     }
  //   },
  onResponse(request, context) {
    if (request.url.endsWith("/echo")) {
      console.log(
        "onResponse",
        request.method,
        request.url,
        request,
        request.headers.get(STREAM_ID_KEY),
        request.headers.get("stream-x"),
        context.response.status,
        context.response.body
      );
    }
  }
});
get("/home", () => new Response("Home"));
get("/foo", (req) => new Response(req.url));
post(
  "/bar",
  duplex(
    (req) => new Response(
      readable.fromTimer(1e3, () => "hello\n").pipeThrough(transform.encode())
    )
  )
);
post(
  "/echo",
  duplex(
    (req, ctx) => new Response(req.body, {
      headers: {
        "stream-r": req.headers.get(STREAM_TYPE_KEY) || "?"
      }
    })
  )
);
get("/*", _static.fetch);
any(
  "*",
  (req) => new Response(
    req.method === "HEAD" ? null : `Not Found | [${req.method}] ${req.url}`,
    { status: 404 }
  )
);
var app_default = {
  serve: {
    key: Deno.env.get("KEY"),
    cert: Deno.env.get("CERT"),
    port: 5050
  },
  fetch: handle
};
export {
  app_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vcm91dGVzL2FwcC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgcmVhZGFibGUsIHRyYW5zZm9ybSwgdHJhbnNwb3J0IH0gZnJvbSBcIi4uL21vZC50c1wiO1xuaW1wb3J0IHsgZHVwbGV4LCBTVFJFQU1fSURfS0VZIH0gZnJvbSBcIi4uL3RyYW5zcG9ydC9oYW5kbGUudHNcIjtcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gXCIuLi90cmFuc3BvcnQvcm91dGVyLnRzXCI7XG5pbXBvcnQgX3N0YXRpYyBmcm9tIFwiLi4vYXBwL3N0YXRpYy50c1wiO1xuaW1wb3J0IFwiLi4vZ2xvYmFsLnRzXCI7XG5pbXBvcnQgeyBTVFJFQU1fVFlQRV9LRVkgfSBmcm9tIFwiLi4vdHJhbnNwb3J0L21vZC50c1wiO1xuXG5PYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIHRyYW5zcG9ydCk7XG5cbmNvbnN0IHsgZ2V0LCBwb3N0LCBwYXRjaCwgYW55LCBoYW5kbGUsIHJvdXRlcyB9ID0gbmV3IFJvdXRlcih7XG4gIG9uUmVxdWVzdChyZXF1ZXN0LCBjb250ZXh0KSB7XG4gICAgaWYgKHJlcXVlc3QudXJsLmVuZHNXaXRoKFwiL2VjaG9cIikpIHtcbiAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICBcIm9uUmVxdWVzdFwiLFxuICAgICAgICByZXF1ZXN0Lm1ldGhvZCxcbiAgICAgICAgcmVxdWVzdC51cmwsXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIHJlcXVlc3QuaGVhZGVycy5nZXQoU1RSRUFNX0lEX0tFWSksXG4gICAgICAgIHJlcXVlc3QuaGVhZGVycy5nZXQoXCJzdHJlYW0teFwiKSxcbiAgICAgICk7XG4gICAgfVxuICB9LFxuICAvLyAgIG9uTWF0Y2gocmVxdWVzdCwgY29udGV4dCkge1xuICAvLyAgICAgaWYgKHJlcXVlc3QudXJsLmVuZHNXaXRoKFwiL2VjaG9cIikpIHtcbiAgLy8gICAgICAgY29uc29sZS5sb2coXCJvbk1hdGNoXCIsIHJlcXVlc3QubWV0aG9kLCByZXF1ZXN0LnVybCwgY29udGV4dC5yb3V0ZSk7XG4gIC8vICAgICB9XG4gIC8vICAgfSxcbiAgb25SZXNwb25zZShyZXF1ZXN0LCBjb250ZXh0KSB7XG4gICAgaWYgKHJlcXVlc3QudXJsLmVuZHNXaXRoKFwiL2VjaG9cIikpIHtcbiAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICBcIm9uUmVzcG9uc2VcIixcbiAgICAgICAgcmVxdWVzdC5tZXRob2QsXG4gICAgICAgIHJlcXVlc3QudXJsLFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICByZXF1ZXN0LmhlYWRlcnMuZ2V0KFNUUkVBTV9JRF9LRVkpLFxuICAgICAgICByZXF1ZXN0LmhlYWRlcnMuZ2V0KFwic3RyZWFtLXhcIiksXG4gICAgICAgIGNvbnRleHQucmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICBjb250ZXh0LnJlc3BvbnNlLmJvZHksXG4gICAgICApO1xuICAgIH1cbiAgfSxcbn0pO1xuXG5nZXQoXCIvaG9tZVwiLCAoKSA9PiBuZXcgUmVzcG9uc2UoXCJIb21lXCIpKTtcbmdldChcIi9mb29cIiwgKHJlcSkgPT4gbmV3IFJlc3BvbnNlKHJlcS51cmwpKTtcblxucG9zdChcbiAgXCIvYmFyXCIsXG4gIGR1cGxleCgocmVxKSA9PlxuICAgIG5ldyBSZXNwb25zZShcbiAgICAgIHJlYWRhYmxlLmZyb21UaW1lcigxMDAwLCAoKSA9PiBcImhlbGxvXFxuXCIpLnBpcGVUaHJvdWdoKHRyYW5zZm9ybS5lbmNvZGUoKSksXG4gICAgKVxuICApLFxuKTtcblxucG9zdChcbiAgXCIvZWNob1wiLFxuICBkdXBsZXgoKHJlcSwgY3R4KSA9PlxuICAgIG5ldyBSZXNwb25zZShyZXEuYm9keSwge1xuICAgICAgaGVhZGVyczoge1xuICAgICAgICBcInN0cmVhbS1yXCI6IHJlcS5oZWFkZXJzLmdldChTVFJFQU1fVFlQRV9LRVkpIHx8IFwiP1wiLFxuICAgICAgfSxcbiAgICB9KVxuICApLFxuKTtcblxuZ2V0KFwiLypcIiwgX3N0YXRpYy5mZXRjaCk7XG5cbmFueShcbiAgXCIqXCIsXG4gIChyZXEpID0+XG4gICAgbmV3IFJlc3BvbnNlKFxuICAgICAgcmVxLm1ldGhvZCA9PT0gXCJIRUFEXCIgPyBudWxsIDogYE5vdCBGb3VuZCB8IFske3JlcS5tZXRob2R9XSAke3JlcS51cmx9YCxcbiAgICAgIHsgc3RhdHVzOiA0MDQgfSxcbiAgICApLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBzZXJ2ZToge1xuICAgIGtleTogRGVuby5lbnYuZ2V0KFwiS0VZXCIpLFxuICAgIGNlcnQ6IERlbm8uZW52LmdldChcIkNFUlRcIiksXG4gICAgcG9ydDogNTA1MCxcbiAgfSxcbiAgZmV0Y2g6IGhhbmRsZSxcbn07XG4iXSwKICAibWFwcGluZ3MiOiAiQUFBQSxTQUFTLFVBQVUsV0FBVyxpQkFBaUI7QUFDL0MsU0FBUyxRQUFRLHFCQUFxQjtBQUN0QyxTQUFTLGNBQWM7QUFDdkIsT0FBTyxhQUFhO0FBQ3BCLE9BQU87QUFDUCxTQUFTLHVCQUF1QjtBQUVoQyxPQUFPLE9BQU8sWUFBWSxTQUFTO0FBRW5DLE1BQU0sRUFBRSxLQUFLLE1BQU0sT0FBTyxLQUFLLFFBQVEsT0FBTyxJQUFJLElBQUksT0FBTztBQUFBLEVBQzNELFVBQVUsU0FBUyxTQUFTO0FBQzFCLFFBQUksUUFBUSxJQUFJLFNBQVMsT0FBTyxHQUFHO0FBQ2pDLGNBQVE7QUFBQSxRQUNOO0FBQUEsUUFDQSxRQUFRO0FBQUEsUUFDUixRQUFRO0FBQUEsUUFDUjtBQUFBLFFBQ0EsUUFBUSxRQUFRLElBQUksYUFBYTtBQUFBLFFBQ2pDLFFBQVEsUUFBUSxJQUFJLFVBQVU7QUFBQSxNQUNoQztBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsV0FBVyxTQUFTLFNBQVM7QUFDM0IsUUFBSSxRQUFRLElBQUksU0FBUyxPQUFPLEdBQUc7QUFDakMsY0FBUTtBQUFBLFFBQ047QUFBQSxRQUNBLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSO0FBQUEsUUFDQSxRQUFRLFFBQVEsSUFBSSxhQUFhO0FBQUEsUUFDakMsUUFBUSxRQUFRLElBQUksVUFBVTtBQUFBLFFBQzlCLFFBQVEsU0FBUztBQUFBLFFBQ2pCLFFBQVEsU0FBUztBQUFBLE1BQ25CO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFDRixDQUFDO0FBRUQsSUFBSSxTQUFTLE1BQU0sSUFBSSxTQUFTLE1BQU0sQ0FBQztBQUN2QyxJQUFJLFFBQVEsQ0FBQyxRQUFRLElBQUksU0FBUyxJQUFJLEdBQUcsQ0FBQztBQUUxQztBQUFBLEVBQ0U7QUFBQSxFQUNBO0FBQUEsSUFBTyxDQUFDLFFBQ04sSUFBSTtBQUFBLE1BQ0YsU0FBUyxVQUFVLEtBQU0sTUFBTSxTQUFTLEVBQUUsWUFBWSxVQUFVLE9BQU8sQ0FBQztBQUFBLElBQzFFO0FBQUEsRUFDRjtBQUNGO0FBRUE7QUFBQSxFQUNFO0FBQUEsRUFDQTtBQUFBLElBQU8sQ0FBQyxLQUFLLFFBQ1gsSUFBSSxTQUFTLElBQUksTUFBTTtBQUFBLE1BQ3JCLFNBQVM7QUFBQSxRQUNQLFlBQVksSUFBSSxRQUFRLElBQUksZUFBZSxLQUFLO0FBQUEsTUFDbEQ7QUFBQSxJQUNGLENBQUM7QUFBQSxFQUNIO0FBQ0Y7QUFFQSxJQUFJLE1BQU0sUUFBUSxLQUFLO0FBRXZCO0FBQUEsRUFDRTtBQUFBLEVBQ0EsQ0FBQyxRQUNDLElBQUk7QUFBQSxJQUNGLElBQUksV0FBVyxTQUFTLE9BQU8sZ0JBQWdCLElBQUksTUFBTSxLQUFLLElBQUksR0FBRztBQUFBLElBQ3JFLEVBQUUsUUFBUSxJQUFJO0FBQUEsRUFDaEI7QUFDSjtBQUVBLElBQU8sY0FBUTtBQUFBLEVBQ2IsT0FBTztBQUFBLElBQ0wsS0FBSyxLQUFLLElBQUksSUFBSSxLQUFLO0FBQUEsSUFDdkIsTUFBTSxLQUFLLElBQUksSUFBSSxNQUFNO0FBQUEsSUFDekIsTUFBTTtBQUFBLEVBQ1I7QUFBQSxFQUNBLE9BQU87QUFDVDsiLAogICJuYW1lcyI6IFtdCn0K
