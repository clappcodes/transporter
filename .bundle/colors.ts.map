{
  "version": 3,
  "sources": ["../colors.ts"],
  "sourcesContent": ["// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.\n// This module is browser compatible.\n// A module to print ANSI terminal colors. Inspired by chalk, kleur, and colors\n// on npm.\n\n/**\n * String formatters and utilities for dealing with ANSI color codes.\n *\n * This module is browser compatible.\n *\n * This module supports `NO_COLOR` environmental variable disabling any coloring\n * if `NO_COLOR` is set.\n *\n * @example\n * ```ts\n * import {\n *   bgBlue,\n *   bgRgb24,\n *   bgRgb8,\n *   bold,\n *   italic,\n *   red,\n *   rgb24,\n *   rgb8,\n * } from \"@std/fmt/colors\";\n *\n * console.log(bgBlue(italic(red(bold(\"Hello, World!\")))));\n *\n * // also supports 8bit colors\n *\n * console.log(rgb8(\"Hello, World!\", 42));\n *\n * console.log(bgRgb8(\"Hello, World!\", 42));\n *\n * // and 24bit rgb\n *\n * console.log(rgb24(\"Hello, World!\", {\n *   r: 41,\n *   g: 42,\n *   b: 43,\n * }));\n *\n * console.log(bgRgb24(\"Hello, World!\", {\n *   r: 41,\n *   g: 42,\n *   b: 43,\n * }));\n * ```\n *\n * @module\n */\n\n// deno-lint-ignore no-explicit-any\nconst { Deno } = globalThis as any;\nconst noColor = typeof Deno?.noColor === \"boolean\"\n  ? Deno.noColor as boolean\n  : false;\n\ninterface Code {\n  open: string;\n  close: string;\n  regexp: RegExp;\n}\n\n/** RGB 8-bits per channel. Each in range `0->255` or `0x00->0xff` */\nexport interface Rgb {\n  /** Red component value */\n  r: number;\n  /** Green component value */\n  g: number;\n  /** Blue component value */\n  b: number;\n}\n\nlet enabled = !noColor;\n\n/**\n * Set changing text color to enabled or disabled\n * @param value\n */\nexport function setColorEnabled(value: boolean) {\n  if (Deno?.noColor) {\n    return;\n  }\n\n  enabled = value;\n}\n\n/** Get whether text color change is enabled or disabled. */\nexport function getColorEnabled(): boolean {\n  return enabled;\n}\n\n/**\n * Builds color code\n * @param open\n * @param close\n */\nfunction code(open: number[], close: number): Code {\n  return {\n    open: `\\x1b[${open.join(\";\")}m`,\n    close: `\\x1b[${close}m`,\n    regexp: new RegExp(`\\\\x1b\\\\[${close}m`, \"g\"),\n  };\n}\n\n/**\n * Applies color and background based on color code and its associated text\n * @param str text to apply color settings to\n * @param code color code to apply\n */\nfunction run(str: string, code: Code): string {\n  return enabled\n    ? `${code.open}${str.replace(code.regexp, code.open)}${code.close}`\n    : str;\n}\n\n/**\n * Reset the text modified.\n * @param str text to reset\n */\nexport function reset(str: string): string {\n  return run(str, code([0], 0));\n}\n\n/**\n * Make the text bold.\n * @param str text to make bold\n */\nexport function bold(str: string): string {\n  return run(str, code([1], 22));\n}\n\n/**\n * The text emits only a small amount of light.\n * @param str text to dim\n *\n * Warning: Not all terminal emulators support `dim`.\n * For compatibility across all terminals, use {@linkcode gray} or {@linkcode brightBlack} instead.\n */\nexport function dim(str: string): string {\n  return run(str, code([2], 22));\n}\n\n/**\n * Make the text italic.\n * @param str text to make italic\n */\nexport function italic(str: string): string {\n  return run(str, code([3], 23));\n}\n\n/**\n * Make the text underline.\n * @param str text to underline\n */\nexport function underline(str: string): string {\n  return run(str, code([4], 24));\n}\n\n/**\n * Invert background color and text color.\n * @param str text to invert its color\n */\nexport function inverse(str: string): string {\n  return run(str, code([7], 27));\n}\n\n/**\n * Make the text hidden.\n * @param str text to hide\n */\nexport function hidden(str: string): string {\n  return run(str, code([8], 28));\n}\n\n/**\n * Put horizontal line through the center of the text.\n * @param str text to strike through\n */\nexport function strikethrough(str: string): string {\n  return run(str, code([9], 29));\n}\n\n/**\n * Set text color to black.\n * @param str text to make black\n */\nexport function black(str: string): string {\n  return run(str, code([30], 39));\n}\n\n/**\n * Set text color to red.\n * @param str text to make red\n */\nexport function red(str: string): string {\n  return run(str, code([31], 39));\n}\n\n/**\n * Set text color to green.\n * @param str text to make green\n */\nexport function green(str: string): string {\n  return run(str, code([32], 39));\n}\n\n/**\n * Set text color to yellow.\n * @param str text to make yellow\n */\nexport function yellow(str: string): string {\n  return run(str, code([33], 39));\n}\n\n/**\n * Set text color to blue.\n * @param str text to make blue\n */\nexport function blue(str: string): string {\n  return run(str, code([34], 39));\n}\n\n/**\n * Set text color to magenta.\n * @param str text to make magenta\n */\nexport function magenta(str: string): string {\n  return run(str, code([35], 39));\n}\n\n/**\n * Set text color to cyan.\n * @param str text to make cyan\n */\nexport function cyan(str: string): string {\n  return run(str, code([36], 39));\n}\n\n/**\n * Set text color to white.\n * @param str text to make white\n */\nexport function white(str: string): string {\n  return run(str, code([37], 39));\n}\n\n/**\n * Set text color to gray.\n * @param str text to make gray\n */\nexport function gray(str: string): string {\n  return brightBlack(str);\n}\n\n/**\n * Set text color to bright black.\n * @param str text to make bright-black\n */\nexport function brightBlack(str: string): string {\n  return run(str, code([90], 39));\n}\n\n/**\n * Set text color to bright red.\n * @param str text to make bright-red\n */\nexport function brightRed(str: string): string {\n  return run(str, code([91], 39));\n}\n\n/**\n * Set text color to bright green.\n * @param str text to make bright-green\n */\nexport function brightGreen(str: string): string {\n  return run(str, code([92], 39));\n}\n\n/**\n * Set text color to bright yellow.\n * @param str text to make bright-yellow\n */\nexport function brightYellow(str: string): string {\n  return run(str, code([93], 39));\n}\n\n/**\n * Set text color to bright blue.\n * @param str text to make bright-blue\n */\nexport function brightBlue(str: string): string {\n  return run(str, code([94], 39));\n}\n\n/**\n * Set text color to bright magenta.\n * @param str text to make bright-magenta\n */\nexport function brightMagenta(str: string): string {\n  return run(str, code([95], 39));\n}\n\n/**\n * Set text color to bright cyan.\n * @param str text to make bright-cyan\n */\nexport function brightCyan(str: string): string {\n  return run(str, code([96], 39));\n}\n\n/**\n * Set text color to bright white.\n * @param str text to make bright-white\n */\nexport function brightWhite(str: string): string {\n  return run(str, code([97], 39));\n}\n\n/**\n * Set background color to black.\n * @param str text to make its background black\n */\nexport function bgBlack(str: string): string {\n  return run(str, code([40], 49));\n}\n\n/**\n * Set background color to red.\n * @param str text to make its background red\n */\nexport function bgRed(str: string): string {\n  return run(str, code([41], 49));\n}\n\n/**\n * Set background color to green.\n * @param str text to make its background green\n */\nexport function bgGreen(str: string): string {\n  return run(str, code([42], 49));\n}\n\n/**\n * Set background color to yellow.\n * @param str text to make its background yellow\n */\nexport function bgYellow(str: string): string {\n  return run(str, code([43], 49));\n}\n\n/**\n * Set background color to blue.\n * @param str text to make its background blue\n */\nexport function bgBlue(str: string): string {\n  return run(str, code([44], 49));\n}\n\n/**\n *  Set background color to magenta.\n * @param str text to make its background magenta\n */\nexport function bgMagenta(str: string): string {\n  return run(str, code([45], 49));\n}\n\n/**\n * Set background color to cyan.\n * @param str text to make its background cyan\n */\nexport function bgCyan(str: string): string {\n  return run(str, code([46], 49));\n}\n\n/**\n * Set background color to white.\n * @param str text to make its background white\n */\nexport function bgWhite(str: string): string {\n  return run(str, code([47], 49));\n}\n\n/**\n * Set background color to bright black.\n * @param str text to make its background bright-black\n */\nexport function bgBrightBlack(str: string): string {\n  return run(str, code([100], 49));\n}\n\n/**\n * Set background color to bright red.\n * @param str text to make its background bright-red\n */\nexport function bgBrightRed(str: string): string {\n  return run(str, code([101], 49));\n}\n\n/**\n * Set background color to bright green.\n * @param str text to make its background bright-green\n */\nexport function bgBrightGreen(str: string): string {\n  return run(str, code([102], 49));\n}\n\n/**\n * Set background color to bright yellow.\n * @param str text to make its background bright-yellow\n */\nexport function bgBrightYellow(str: string): string {\n  return run(str, code([103], 49));\n}\n\n/**\n * Set background color to bright blue.\n * @param str text to make its background bright-blue\n */\nexport function bgBrightBlue(str: string): string {\n  return run(str, code([104], 49));\n}\n\n/**\n * Set background color to bright magenta.\n * @param str text to make its background bright-magenta\n */\nexport function bgBrightMagenta(str: string): string {\n  return run(str, code([105], 49));\n}\n\n/**\n * Set background color to bright cyan.\n * @param str text to make its background bright-cyan\n */\nexport function bgBrightCyan(str: string): string {\n  return run(str, code([106], 49));\n}\n\n/**\n * Set background color to bright white.\n * @param str text to make its background bright-white\n */\nexport function bgBrightWhite(str: string): string {\n  return run(str, code([107], 49));\n}\n\n/* Special Color Sequences */\n\n/**\n * Clam and truncate color codes\n * @param n\n * @param max number to truncate to\n * @param min number to truncate from\n */\nfunction clampAndTruncate(n: number, max = 255, min = 0): number {\n  return Math.trunc(Math.max(Math.min(n, max), min));\n}\n\n/**\n * Set text color using paletted 8bit colors.\n * https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit\n * @param str text color to apply paletted 8bit colors to\n * @param color code\n */\nexport function rgb8(str: string, color: number): string {\n  return run(str, code([38, 5, clampAndTruncate(color)], 39));\n}\n\n/**\n * Set background color using paletted 8bit colors.\n * https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit\n * @param str text color to apply paletted 8bit background colors to\n * @param color code\n */\nexport function bgRgb8(str: string, color: number): string {\n  return run(str, code([48, 5, clampAndTruncate(color)], 49));\n}\n\n/**\n * Set text color using 24bit rgb.\n * `color` can be a number in range `0x000000` to `0xffffff` or\n * an `Rgb`.\n *\n * To produce the color magenta:\n *\n * ```ts\n * import { rgb24 } from \"@std/fmt/colors\";\n *\n * rgb24(\"foo\", 0xff00ff);\n * rgb24(\"foo\", {r: 255, g: 0, b: 255});\n * ```\n * @param str text color to apply 24bit rgb to\n * @param color code\n */\nexport function rgb24(str: string, color: number | Rgb): string {\n  if (typeof color === \"number\") {\n    return run(\n      str,\n      code(\n        [38, 2, (color >> 16) & 0xff, (color >> 8) & 0xff, color & 0xff],\n        39,\n      ),\n    );\n  }\n  return run(\n    str,\n    code(\n      [\n        38,\n        2,\n        clampAndTruncate(color.r),\n        clampAndTruncate(color.g),\n        clampAndTruncate(color.b),\n      ],\n      39,\n    ),\n  );\n}\n\n/**\n * Set background color using 24bit rgb.\n * `color` can be a number in range `0x000000` to `0xffffff` or\n * an `Rgb`.\n *\n * To produce the color magenta:\n *\n * ```ts\n * import { bgRgb24 } from \"@std/fmt/colors\";\n *\n * bgRgb24(\"foo\", 0xff00ff);\n * bgRgb24(\"foo\", {r: 255, g: 0, b: 255});\n * ```\n * @param str text color to apply 24bit rgb to\n * @param color code\n */\nexport function bgRgb24(str: string, color: number | Rgb): string {\n  if (typeof color === \"number\") {\n    return run(\n      str,\n      code(\n        [48, 2, (color >> 16) & 0xff, (color >> 8) & 0xff, color & 0xff],\n        49,\n      ),\n    );\n  }\n  return run(\n    str,\n    code(\n      [\n        48,\n        2,\n        clampAndTruncate(color.r),\n        clampAndTruncate(color.g),\n        clampAndTruncate(color.b),\n      ],\n      49,\n    ),\n  );\n}\n\n// https://github.com/chalk/ansi-regex/blob/02fa893d619d3da85411acc8fd4e2eea0e95a9d9/index.js\nconst ANSI_PATTERN = new RegExp(\n  [\n    \"[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)\",\n    \"(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TXZcf-nq-uy=><~]))\",\n  ].join(\"|\"),\n  \"g\",\n);\n\n/**\n * Remove ANSI escape codes from the string.\n * @param string to remove ANSI escape codes from\n *\n *  @deprecated (will be removed in 1.0.0) Use {@linkcode stripAnsiCode} instead.\n */\nexport function stripColor(string: string): string {\n  return stripAnsiCode(string);\n}\n\n/**\n * Remove ANSI escape codes from the string.\n *\n * @param string to remove ANSI escape codes from\n */\nexport function stripAnsiCode(string: string): string {\n  return string.replace(ANSI_PATTERN, \"\");\n}\n"],
  "mappings": "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",
  "names": ["code"]
}
