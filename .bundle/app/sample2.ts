var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
class Env {
  static {
    __name(this, "Env");
  }
  get isDeno() {
    return typeof globalThis.Deno !== "undefined";
  }
  get isBun() {
    return typeof globalThis.Bun !== "undefined";
  }
  get isBrowser() {
    return typeof globalThis.document !== "undefined";
  }
  constructor(init) {
    return Object.assign(this, init ?? {});
  }
}
class Context {
  static {
    __name(this, "Context");
  }
  url;
  env;
  info;
  error;
  layers = [];
  #request;
  #response;
  get request() {
    return this.#request;
  }
  get response() {
    return this.#response;
  }
  constructor(request, init) {
    this.#request = request;
    this.url = new URL(request.url);
    this.env = new Env(init?.env);
    this.info = init?.info;
  }
}
class RequestHandler {
  constructor(route2, fetch) {
    this.route = route2;
    this.fetch = fetch;
    this.#pattern = new URLPattern(route2);
  }
  static {
    __name(this, "RequestHandler");
  }
  #pattern;
  #method;
  canHandle(request) {
    return this.#pattern.test(request.url);
  }
  handle(request, context) {
    const match = this.#pattern.exec(request.url);
    if (match) {
      context = context || new Context(request, { match });
      return this.fetch(request, context);
    }
  }
  setRoute(route2) {
    this.#pattern = new URLPattern(route2);
    return this;
  }
  setMethod(method2) {
    this.#method = method2;
    return this;
  }
}
function defineRequestHandler(route2, fetch) {
  return new RequestHandler(route2, fetch);
}
__name(defineRequestHandler, "defineRequestHandler");
function route(route2, fetch) {
  const pattern = new URLPattern(
    typeof route2 === "string" ? { pathname: route2 } : route2
  );
  return {
    get pattern() {
      return pattern;
    },
    route: route2,
    fetch(request, context) {
      context = context || new Context(request);
      return ((context.match = pattern.exec(request.url)) && fetch(request, context)) ?? void 0;
    }
  };
}
__name(route, "route");
function method(method2, fetch) {
  return {
    get method() {
      return method2;
    },
    fetch: (req, ctx) => {
      if (req.method.toLowerCase() === method2) {
        const res = fetch(req, ctx);
        console.log(req.method.toLowerCase(), method2, res);
        return res;
      }
    }
  };
}
__name(method, "method");
export {
  Context,
  Env,
  RequestHandler,
  defineRequestHandler,
  method,
  route
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vYXBwL3NhbXBsZTIudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB0eXBlIHsgUmVxdWVzdE1ldGhvZCB9IGZyb20gXCIuLi90eXBlcy50c1wiO1xuaW1wb3J0IHsgUHJvbWlzZWQgfSBmcm9tIFwiLi4vdXRpbHMvUHJvbWlzZWQudHNcIjtcblxuZXhwb3J0IHR5cGUgUmVxdWVzdEhhbmRsZXJSb3V0ZSA9XG4gIHwgc3RyaW5nXG4gIHwgUmVhZG9ubHk8VVJMUGF0dGVybkluaXQgJiB7IG1ldGhvZD86IFJlcXVlc3RNZXRob2QgfT47XG5cbmV4cG9ydCB0eXBlIFJlcXVlc3RIYW5kbGVyRmV0Y2ggPSAoXG4gIHJlcXVlc3Q6IFJlcXVlc3QsXG4gIGNvbnRleHQ6IENvbnRleHQsXG4pID0+IFJlc3BvbnNlIHwgUHJvbWlzZTxSZXNwb25zZT47XG5cbmV4cG9ydCB0eXBlIFJlcXVlc3RIYW5kbGVySW5pdCA9IHtcbiAgcm91dGU6IFJlcXVlc3RIYW5kbGVyUm91dGU7XG4gIGZldGNoOiBSZXF1ZXN0SGFuZGxlckZldGNoO1xufTtcblxuZXhwb3J0IGNsYXNzIEVudiB7XG4gIGdldCBpc0Rlbm8oKSB7XG4gICAgLy8gQHRzLWlnbm9yZSAuXG4gICAgcmV0dXJuIHR5cGVvZiBnbG9iYWxUaGlzLkRlbm8gIT09IFwidW5kZWZpbmVkXCI7XG4gIH1cbiAgZ2V0IGlzQnVuKCkge1xuICAgIC8vIEB0cy1pZ25vcmUgLlxuICAgIHJldHVybiB0eXBlb2YgZ2xvYmFsVGhpcy5CdW4gIT09IFwidW5kZWZpbmVkXCI7XG4gIH1cbiAgZ2V0IGlzQnJvd3NlcigpIHtcbiAgICByZXR1cm4gdHlwZW9mIGdsb2JhbFRoaXMuZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCI7XG4gIH1cbiAgY29uc3RydWN0b3IoaW5pdD86IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4+KSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24odGhpcywgaW5pdCA/PyB7fSk7XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgQ29udGV4dEluaXQgPSB7XG4gIGVudj86IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4+O1xuICBpbmZvPzogRGVuby5TZXJ2ZUhhbmRsZXJJbmZvO1xuICBtYXRjaD86IFVSTFBhdHRlcm5SZXN1bHQ7XG59O1xuXG5leHBvcnQgY2xhc3MgQ29udGV4dCB7XG4gIHVybDogVVJMO1xuICBlbnY6IEVudjtcbiAgaW5mbz86IERlbm8uU2VydmVIYW5kbGVySW5mbztcbiAgZXJyb3I/OiBFcnJvcjtcbiAgbGF5ZXJzOiBSZXF1ZXN0SGFuZGxlcltdID0gW107XG4gICNyZXF1ZXN0OiBSZXF1ZXN0O1xuICAjcmVzcG9uc2U6IFJlc3BvbnNlIHwgUHJvbWlzZTxSZXNwb25zZT4gfCB1bmRlZmluZWQ7XG4gIGRlY2xhcmUgbWF0Y2g6IFVSTFBhdHRlcm5SZXN1bHQgfCBudWxsO1xuXG4gIGdldCByZXF1ZXN0KCkge1xuICAgIHJldHVybiB0aGlzLiNyZXF1ZXN0O1xuICB9XG4gIGdldCByZXNwb25zZSgpIHtcbiAgICByZXR1cm4gdGhpcy4jcmVzcG9uc2U7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihyZXF1ZXN0OiBSZXF1ZXN0LCBpbml0PzogQ29udGV4dEluaXQpIHtcbiAgICB0aGlzLiNyZXF1ZXN0ID0gcmVxdWVzdDtcblxuICAgIHRoaXMudXJsID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgdGhpcy5lbnYgPSBuZXcgRW52KGluaXQ/LmVudik7XG5cbiAgICB0aGlzLmluZm8gPSBpbml0Py5pbmZvO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZXF1ZXN0SGFuZGxlcjxcbiAgUiBleHRlbmRzIFJlcXVlc3RIYW5kbGVyUm91dGUsXG4gIEYgZXh0ZW5kcyBSZXF1ZXN0SGFuZGxlckZldGNoLFxuPiB7XG4gICNwYXR0ZXJuOiBVUkxQYXR0ZXJuO1xuICAjbWV0aG9kOiBzdHJpbmc7XG5cbiAgY2FuSGFuZGxlKHJlcXVlc3Q6IFJlcXVlc3QpIHtcbiAgICByZXR1cm4gdGhpcy4jcGF0dGVybi50ZXN0KHJlcXVlc3QudXJsKTtcbiAgfVxuXG4gIGhhbmRsZShyZXF1ZXN0OiBSZXF1ZXN0LCBjb250ZXh0OiBDb250ZXh0KSB7XG4gICAgY29uc3QgbWF0Y2ggPSB0aGlzLiNwYXR0ZXJuLmV4ZWMocmVxdWVzdC51cmwpO1xuXG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICBjb250ZXh0ID0gY29udGV4dCB8fCBuZXcgQ29udGV4dChyZXF1ZXN0LCB7IG1hdGNoIH0pO1xuICAgICAgcmV0dXJuIHRoaXMuZmV0Y2gocmVxdWVzdCwgY29udGV4dCk7XG4gICAgfVxuICB9XG5cbiAgc2V0Um91dGUocm91dGU6IFIpIHtcbiAgICB0aGlzLiNwYXR0ZXJuID0gbmV3IFVSTFBhdHRlcm4ocm91dGUpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc2V0TWV0aG9kKG1ldGhvZDogUmVxdWVzdE1ldGhvZCkge1xuICAgIHRoaXMuI21ldGhvZCA9IG1ldGhvZDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByb3V0ZTogUixcbiAgICBwdWJsaWMgZmV0Y2g6IEYsXG4gICkge1xuICAgIHRoaXMuI3BhdHRlcm4gPSBuZXcgVVJMUGF0dGVybihyb3V0ZSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZVJlcXVlc3RIYW5kbGVyKFxuICByb3V0ZTogUmVxdWVzdEhhbmRsZXJSb3V0ZSxcbiAgZmV0Y2g6IFJlcXVlc3RIYW5kbGVyRmV0Y2gsXG4pIHtcbiAgcmV0dXJuIG5ldyBSZXF1ZXN0SGFuZGxlcihyb3V0ZSwgZmV0Y2gpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcm91dGU8SSBleHRlbmRzIFVSTFBhdHRlcm5JbnB1dD4oXG4gIHJvdXRlOiBJLFxuICBmZXRjaDogUmVxdWVzdEhhbmRsZXJGZXRjaCxcbikge1xuICBjb25zdCBwYXR0ZXJuID0gbmV3IFVSTFBhdHRlcm4oXG4gICAgdHlwZW9mIHJvdXRlID09PSBcInN0cmluZ1wiID8geyBwYXRobmFtZTogcm91dGUgfSA6IHJvdXRlLFxuICApO1xuICByZXR1cm4ge1xuICAgIGdldCBwYXR0ZXJuKCkge1xuICAgICAgcmV0dXJuIHBhdHRlcm47XG4gICAgfSxcbiAgICByb3V0ZTogcm91dGUgYXMgYCR7SSBleHRlbmRzIHN0cmluZyA/IEkgOiBcIjxVUkxQYXR0ZXJuSW5pdD5cIn1gLFxuICAgIGZldGNoKHJlcXVlc3Q6IFJlcXVlc3QsIGNvbnRleHQ6IENvbnRleHQpIHtcbiAgICAgIGNvbnRleHQgPSBjb250ZXh0IHx8IG5ldyBDb250ZXh0KHJlcXVlc3QpO1xuICAgICAgcmV0dXJuICgoY29udGV4dC5tYXRjaCA9IHBhdHRlcm4uZXhlYyhyZXF1ZXN0LnVybCkpICYmXG4gICAgICAgIGZldGNoKHJlcXVlc3QsIGNvbnRleHQpKSA/PyB1bmRlZmluZWQ7XG4gICAgfSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ldGhvZDxUIGV4dGVuZHMgUmVxdWVzdE1ldGhvZD4oXG4gIG1ldGhvZDogVCxcbiAgZmV0Y2g6IFJlcXVlc3RIYW5kbGVyRmV0Y2gsXG4pIHtcbiAgcmV0dXJuIHtcbiAgICBnZXQgbWV0aG9kKCkge1xuICAgICAgcmV0dXJuIG1ldGhvZDtcbiAgICB9LFxuICAgIGZldGNoOiAoKHJlcTogUmVxdWVzdCwgY3R4OiBDb250ZXh0KSA9PiB7XG4gICAgICBpZiAocmVxLm1ldGhvZC50b0xvd2VyQ2FzZSgpID09PSBtZXRob2QpIHtcbiAgICAgICAgY29uc3QgcmVzID0gZmV0Y2gocmVxLCBjdHgpO1xuICAgICAgICBjb25zb2xlLmxvZyhyZXEubWV0aG9kLnRvTG93ZXJDYXNlKCksIG1ldGhvZCwgcmVzKTtcblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfVxuICAgIH0pLFxuICB9O1xufVxuXG4vLyBleHBvcnQgY29uc3QgaGVsbG8gPSByb3V0ZShcbi8vICAgXCIvaGVsbG9cIixcbi8vICAgKHJlcXVlc3QpID0+IG5ldyBSZXNwb25zZShgSGVsbG8gJHtyZXF1ZXN0LnVybH1gKSxcbi8vICk7XG4iXSwKICAibWFwcGluZ3MiOiAiOztBQWlCTyxNQUFNLElBQUk7QUFBQSxFQWpCakIsT0FpQmlCO0FBQUE7QUFBQTtBQUFBLEVBQ2YsSUFBSSxTQUFTO0FBRVgsV0FBTyxPQUFPLFdBQVcsU0FBUztBQUFBLEVBQ3BDO0FBQUEsRUFDQSxJQUFJLFFBQVE7QUFFVixXQUFPLE9BQU8sV0FBVyxRQUFRO0FBQUEsRUFDbkM7QUFBQSxFQUNBLElBQUksWUFBWTtBQUNkLFdBQU8sT0FBTyxXQUFXLGFBQWE7QUFBQSxFQUN4QztBQUFBLEVBQ0EsWUFBWSxNQUFrRDtBQUM1RCxXQUFPLE9BQU8sT0FBTyxNQUFNLFFBQVEsQ0FBQyxDQUFDO0FBQUEsRUFDdkM7QUFDRjtBQVFPLE1BQU0sUUFBUTtBQUFBLEVBeENyQixPQXdDcUI7QUFBQTtBQUFBO0FBQUEsRUFDbkI7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBLFNBQTJCLENBQUM7QUFBQSxFQUM1QjtBQUFBLEVBQ0E7QUFBQSxFQUdBLElBQUksVUFBVTtBQUNaLFdBQU8sS0FBSztBQUFBLEVBQ2Q7QUFBQSxFQUNBLElBQUksV0FBVztBQUNiLFdBQU8sS0FBSztBQUFBLEVBQ2Q7QUFBQSxFQUVBLFlBQVksU0FBa0IsTUFBb0I7QUFDaEQsU0FBSyxXQUFXO0FBRWhCLFNBQUssTUFBTSxJQUFJLElBQUksUUFBUSxHQUFHO0FBQzlCLFNBQUssTUFBTSxJQUFJLElBQUksTUFBTSxHQUFHO0FBRTVCLFNBQUssT0FBTyxNQUFNO0FBQUEsRUFDcEI7QUFDRjtBQUVPLE1BQU0sZUFHWDtBQUFBLEVBMkJBLFlBQ1NBLFFBQ0EsT0FDUDtBQUZPLGlCQUFBQTtBQUNBO0FBRVAsU0FBSyxXQUFXLElBQUksV0FBV0EsTUFBSztBQUFBLEVBQ3RDO0FBQUEsRUF0R0YsT0FzRUU7QUFBQTtBQUFBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUVBLFVBQVUsU0FBa0I7QUFDMUIsV0FBTyxLQUFLLFNBQVMsS0FBSyxRQUFRLEdBQUc7QUFBQSxFQUN2QztBQUFBLEVBRUEsT0FBTyxTQUFrQixTQUFrQjtBQUN6QyxVQUFNLFFBQVEsS0FBSyxTQUFTLEtBQUssUUFBUSxHQUFHO0FBRTVDLFFBQUksT0FBTztBQUNULGdCQUFVLFdBQVcsSUFBSSxRQUFRLFNBQVMsRUFBRSxNQUFNLENBQUM7QUFDbkQsYUFBTyxLQUFLLE1BQU0sU0FBUyxPQUFPO0FBQUEsSUFDcEM7QUFBQSxFQUNGO0FBQUEsRUFFQSxTQUFTQSxRQUFVO0FBQ2pCLFNBQUssV0FBVyxJQUFJLFdBQVdBLE1BQUs7QUFDcEMsV0FBTztBQUFBLEVBQ1Q7QUFBQSxFQUVBLFVBQVVDLFNBQXVCO0FBQy9CLFNBQUssVUFBVUE7QUFDZixXQUFPO0FBQUEsRUFDVDtBQVFGO0FBRU8sU0FBUyxxQkFDZEQsUUFDQSxPQUNBO0FBQ0EsU0FBTyxJQUFJLGVBQWVBLFFBQU8sS0FBSztBQUN4QztBQUxnQjtBQU9ULFNBQVMsTUFDZEEsUUFDQSxPQUNBO0FBQ0EsUUFBTSxVQUFVLElBQUk7QUFBQSxJQUNsQixPQUFPQSxXQUFVLFdBQVcsRUFBRSxVQUFVQSxPQUFNLElBQUlBO0FBQUEsRUFDcEQ7QUFDQSxTQUFPO0FBQUEsSUFDTCxJQUFJLFVBQVU7QUFDWixhQUFPO0FBQUEsSUFDVDtBQUFBLElBQ0EsT0FBT0E7QUFBQSxJQUNQLE1BQU0sU0FBa0IsU0FBa0I7QUFDeEMsZ0JBQVUsV0FBVyxJQUFJLFFBQVEsT0FBTztBQUN4QyxlQUFTLFFBQVEsUUFBUSxRQUFRLEtBQUssUUFBUSxHQUFHLE1BQy9DLE1BQU0sU0FBUyxPQUFPLE1BQU07QUFBQSxJQUNoQztBQUFBLEVBQ0Y7QUFDRjtBQWxCZ0I7QUFvQlQsU0FBUyxPQUNkQyxTQUNBLE9BQ0E7QUFDQSxTQUFPO0FBQUEsSUFDTCxJQUFJLFNBQVM7QUFDWCxhQUFPQTtBQUFBLElBQ1Q7QUFBQSxJQUNBLE9BQVEsQ0FBQyxLQUFjLFFBQWlCO0FBQ3RDLFVBQUksSUFBSSxPQUFPLFlBQVksTUFBTUEsU0FBUTtBQUN2QyxjQUFNLE1BQU0sTUFBTSxLQUFLLEdBQUc7QUFDMUIsZ0JBQVEsSUFBSSxJQUFJLE9BQU8sWUFBWSxHQUFHQSxTQUFRLEdBQUc7QUFFakQsZUFBTztBQUFBLE1BQ1Q7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUNGO0FBakJnQjsiLAogICJuYW1lcyI6IFsicm91dGUiLCAibWV0aG9kIl0KfQo=
