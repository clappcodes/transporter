var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
function defineHandler(fetch, rest) {
  return Object.assign({ fetch }, rest);
}
__name(defineHandler, "defineHandler");
function defineResponseHandler(onResponse, rest) {
  return Object.assign({ onResponse }, rest);
}
__name(defineResponseHandler, "defineResponseHandler");
function defineRequestHandler(onRequest, rest) {
  return Object.assign({ onRequest }, rest);
}
__name(defineRequestHandler, "defineRequestHandler");
const responseCors = defineResponseHandler(
  /* @__PURE__ */ __name(function onCorsResponse(request, context) {
    console.log(`[[defineResponseHandler]] ${context.response?.url}`);
    if (!context.response) {
      console.warn(`Context.response unavailable (${request.url})`);
      context.response = new Response(
        `Context.response unavailable (${request.url})`
      );
    }
    context.response.headers.set("cache-control", "no-cache");
    context.response.headers.set("access-control-allow-origin", "*");
    context.response.headers.set("access-control-allow-methods", "*");
    context.response.headers.set("access-control-allow-headers", "*");
    context.response.headers.set("access-control-max-age", "100");
    console.log(`Context.response headers setup (${request.url})`);
  }, "onCorsResponse")
);
const requestCors = defineRequestHandler(
  /* @__PURE__ */ __name(function onCorsRequest(request, context) {
    console.log(
      `[[defineRequestHandler]] ${request.url}`
    );
  }, "onCorsRequest")
);
var cors_default = Object.assign(responseCors, requestCors);
export {
  cors_default as default,
  defineHandler,
  defineRequestHandler,
  defineResponseHandler
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vYXBwL2NvcnMudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB0eXBlIHsgRmV0Y2hIYW5kbGVyLCBIYW5kbGVyTW9kdWxlIH0gZnJvbSBcIi4uL3R5cGVzLnRzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVIYW5kbGVyPFxuICBUIGV4dGVuZHMgRmV0Y2hIYW5kbGVyLFxuICBSIGV4dGVuZHMgUGFydGlhbDxIYW5kbGVyTW9kdWxlPiAmIHsgZmV0Y2g6IFQgfSA9IFBhcnRpYWw8SGFuZGxlck1vZHVsZT4gJiB7XG4gICAgZmV0Y2g6IFQ7XG4gIH0sXG4+KGZldGNoOiBULCByZXN0PzogUikge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7IGZldGNoIH0gYXMgUiwgcmVzdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVSZXNwb25zZUhhbmRsZXI8XG4gIFQgZXh0ZW5kcyBGZXRjaEhhbmRsZXIsXG4gIFIgZXh0ZW5kcyBQYXJ0aWFsPEhhbmRsZXJNb2R1bGU+ICYgeyBvblJlc3BvbnNlOiBUIH0gPVxuICAgICYgUGFydGlhbDxIYW5kbGVyTW9kdWxlPlxuICAgICYge1xuICAgICAgb25SZXNwb25zZTogVDtcbiAgICB9LFxuPihvblJlc3BvbnNlOiBULCByZXN0PzogUikge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7IG9uUmVzcG9uc2UgfSBhcyBSLCByZXN0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZVJlcXVlc3RIYW5kbGVyPFxuICBUIGV4dGVuZHMgRmV0Y2hIYW5kbGVyLFxuICBSIGV4dGVuZHMgUGFydGlhbDxIYW5kbGVyTW9kdWxlPiAmIHsgb25SZXF1ZXN0OiBUIH0gPVxuICAgICYgUGFydGlhbDxIYW5kbGVyTW9kdWxlPlxuICAgICYge1xuICAgICAgb25SZXF1ZXN0OiBUO1xuICAgIH0sXG4+KG9uUmVxdWVzdDogVCwgcmVzdD86IFIpIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oeyBvblJlcXVlc3QgfSBhcyBSLCByZXN0KTtcbn1cblxuY29uc3QgcmVzcG9uc2VDb3JzID0gZGVmaW5lUmVzcG9uc2VIYW5kbGVyKFxuICBmdW5jdGlvbiBvbkNvcnNSZXNwb25zZShyZXF1ZXN0LCBjb250ZXh0KSB7XG4gICAgY29uc29sZS5sb2coYFtbZGVmaW5lUmVzcG9uc2VIYW5kbGVyXV0gJHtjb250ZXh0LnJlc3BvbnNlPy51cmx9YCk7XG4gICAgaWYgKCFjb250ZXh0LnJlc3BvbnNlKSB7XG4gICAgICBjb25zb2xlLndhcm4oYENvbnRleHQucmVzcG9uc2UgdW5hdmFpbGFibGUgKCR7cmVxdWVzdC51cmx9KWApO1xuICAgICAgY29udGV4dC5yZXNwb25zZSA9IG5ldyBSZXNwb25zZShcbiAgICAgICAgYENvbnRleHQucmVzcG9uc2UgdW5hdmFpbGFibGUgKCR7cmVxdWVzdC51cmx9KWAsXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnRleHQucmVzcG9uc2UuaGVhZGVycy5zZXQoXCJjYWNoZS1jb250cm9sXCIsIFwibm8tY2FjaGVcIik7XG4gICAgY29udGV4dC5yZXNwb25zZS5oZWFkZXJzLnNldChcImFjY2Vzcy1jb250cm9sLWFsbG93LW9yaWdpblwiLCBcIipcIik7XG4gICAgY29udGV4dC5yZXNwb25zZS5oZWFkZXJzLnNldChcImFjY2Vzcy1jb250cm9sLWFsbG93LW1ldGhvZHNcIiwgXCIqXCIpO1xuICAgIGNvbnRleHQucmVzcG9uc2UuaGVhZGVycy5zZXQoXCJhY2Nlc3MtY29udHJvbC1hbGxvdy1oZWFkZXJzXCIsIFwiKlwiKTtcbiAgICBjb250ZXh0LnJlc3BvbnNlLmhlYWRlcnMuc2V0KFwiYWNjZXNzLWNvbnRyb2wtbWF4LWFnZVwiLCBcIjEwMFwiKTtcblxuICAgIGNvbnNvbGUubG9nKGBDb250ZXh0LnJlc3BvbnNlIGhlYWRlcnMgc2V0dXAgKCR7cmVxdWVzdC51cmx9KWApO1xuICB9LFxuKTtcblxuY29uc3QgcmVxdWVzdENvcnMgPSBkZWZpbmVSZXF1ZXN0SGFuZGxlcihcbiAgZnVuY3Rpb24gb25Db3JzUmVxdWVzdChyZXF1ZXN0LCBjb250ZXh0KSB7XG4gICAgY29uc29sZS5sb2coXG4gICAgICBgW1tkZWZpbmVSZXF1ZXN0SGFuZGxlcl1dICR7cmVxdWVzdC51cmx9YCxcbiAgICApO1xuICAgIC8vIHJlcXVlc3QuaGVhZGVycy5zZXQoXCJ4LWNvcnMtcmVxXCIsIG5ldyBEYXRlKCkudG9EYXRlU3RyaW5nKCkpO1xuICB9LFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgT2JqZWN0LmFzc2lnbihyZXNwb25zZUNvcnMsIHJlcXVlc3RDb3JzKTtcbiJdLAogICJtYXBwaW5ncyI6ICI7O0FBRU8sU0FBUyxjQUtkLE9BQVUsTUFBVTtBQUNwQixTQUFPLE9BQU8sT0FBTyxFQUFFLE1BQU0sR0FBUSxJQUFJO0FBQzNDO0FBUGdCO0FBU1QsU0FBUyxzQkFPZCxZQUFlLE1BQVU7QUFDekIsU0FBTyxPQUFPLE9BQU8sRUFBRSxXQUFXLEdBQVEsSUFBSTtBQUNoRDtBQVRnQjtBQVdULFNBQVMscUJBT2QsV0FBYyxNQUFVO0FBQ3hCLFNBQU8sT0FBTyxPQUFPLEVBQUUsVUFBVSxHQUFRLElBQUk7QUFDL0M7QUFUZ0I7QUFXaEIsTUFBTSxlQUFlO0FBQUEsRUFDbkIsZ0NBQVMsZUFBZSxTQUFTLFNBQVM7QUFDeEMsWUFBUSxJQUFJLDZCQUE2QixRQUFRLFVBQVUsR0FBRyxFQUFFO0FBQ2hFLFFBQUksQ0FBQyxRQUFRLFVBQVU7QUFDckIsY0FBUSxLQUFLLGlDQUFpQyxRQUFRLEdBQUcsR0FBRztBQUM1RCxjQUFRLFdBQVcsSUFBSTtBQUFBLFFBQ3JCLGlDQUFpQyxRQUFRLEdBQUc7QUFBQSxNQUM5QztBQUFBLElBQ0Y7QUFFQSxZQUFRLFNBQVMsUUFBUSxJQUFJLGlCQUFpQixVQUFVO0FBQ3hELFlBQVEsU0FBUyxRQUFRLElBQUksK0JBQStCLEdBQUc7QUFDL0QsWUFBUSxTQUFTLFFBQVEsSUFBSSxnQ0FBZ0MsR0FBRztBQUNoRSxZQUFRLFNBQVMsUUFBUSxJQUFJLGdDQUFnQyxHQUFHO0FBQ2hFLFlBQVEsU0FBUyxRQUFRLElBQUksMEJBQTBCLEtBQUs7QUFFNUQsWUFBUSxJQUFJLG1DQUFtQyxRQUFRLEdBQUcsR0FBRztBQUFBLEVBQy9ELEdBaEJBO0FBaUJGO0FBRUEsTUFBTSxjQUFjO0FBQUEsRUFDbEIsZ0NBQVMsY0FBYyxTQUFTLFNBQVM7QUFDdkMsWUFBUTtBQUFBLE1BQ04sNEJBQTRCLFFBQVEsR0FBRztBQUFBLElBQ3pDO0FBQUEsRUFFRixHQUxBO0FBTUY7QUFFQSxJQUFPLGVBQVEsT0FBTyxPQUFPLGNBQWMsV0FBVzsiLAogICJuYW1lcyI6IFtdCn0K
