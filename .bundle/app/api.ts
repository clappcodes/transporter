var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
import { readable, transform } from "../mod.ts";
import {
  STREAM_ID_KEY,
  STREAM_TYPE,
  STREAM_TYPE_KEY
} from "../transport/handle.ts";
import "./api.util.ts";
class XResponse extends Response {
  static {
    __name(this, "XResponse");
  }
  constructor(body, init) {
    super(
      readable.from(body).pipeThrough(
        transform.toUint8Array()
      ),
      init
    );
  }
  [Symbol.for("Deno.customInspect")](inspect) {
    const { body, headers } = this;
    return `${this.constructor.name} ${inspect({ body, headers })}`;
  }
}
new XResponse(function* () {
  yield 123;
});
class XRequest extends Request {
  static {
    __name(this, "XRequest");
  }
  get duplex() {
    return this.#duplex;
  }
  // get requireFullDuplex() {
  //   return this.#requireFullDuplex;
  // }
  #requireFullDuplex = false;
  #duplex = void 0;
  constructor(method, input, init) {
    const _isBrowser = Reflect.has(globalThis, "document");
    const _isDeno = Reflect.has(globalThis, "Deno");
    const _isBun = Reflect.has(globalThis, "Bun");
    const isStreamingBodyRequest = init?.body instanceof ReadableStream && method !== "GET" && method !== "HEAD";
    if (isStreamingBodyRequest) {
      if (_isDeno) {
        Object.assign(init, { duplex: "full" });
      } else {
        Object.assign(init, { duplex: "half" });
      }
    }
    super(input, { ...init, method: method === "*" ? void 0 : method });
    this.#duplex = init?.duplex;
    if (this.#duplex === "half") {
      this.headers.set(STREAM_ID_KEY, Math.random().toString().slice(2));
      this.headers.set(STREAM_TYPE_KEY, STREAM_TYPE.REQUEST);
      this[STREAM_TYPE_KEY] = STREAM_TYPE.REQUEST;
    } else {
      if (this.headers.has(STREAM_ID_KEY)) {
        if (this.headers.get(STREAM_TYPE_KEY) === STREAM_TYPE.REQUEST) {
          this.headers.set(STREAM_TYPE_KEY, STREAM_TYPE.RESPONSE);
          this[STREAM_TYPE_KEY] = STREAM_TYPE.RESPONSE;
        }
      }
    }
  }
}
function createRequest(method, input, init) {
  return new XRequest(method, input, init);
}
__name(createRequest, "createRequest");
function create(method, base2) {
  const fn = /* @__PURE__ */ __name((input, init) => {
    const url = base2 && typeof input === "string" ? new URL(input, base2).href : String(input || "/");
    return createRequest(
      method,
      url,
      init
    );
  }, "fn");
  Object.defineProperty(fn, "name", {
    value: method.toLowerCase()
  });
  Object.defineProperty(fn, "toString", {
    value: () => `${method.toLowerCase()}(input: XRequestInput, init?: XRequestInit): Response`
  });
  return fn;
}
__name(create, "create");
function base(input) {
  return {
    get: create("GET", input),
    put: create("PUT", input),
    post: create("POST", input),
    head: create("HEAD", input),
    patch: create("PATCH", input),
    delete: create("DELETE", input),
    options: create("OPTIONS", input)
  };
}
__name(base, "base");
const baseURL = typeof location === "undefined" ? "https://localhost:5050" : location.href;
const api = base(baseURL);
var api_default = api;
function xfetch(input, init) {
  const fetch = xfetch.fetch || globalThis.fetch;
  const request = input instanceof XRequest ? input : ((base2) => {
    const url = base2 && typeof input === "string" ? String(new URL(input, base2)) : String(input || "/");
    return createRequest(init?.method, url, init);
  })(baseURL);
  if (request.duplex === "half") {
    console.log("(requireFullDuplex)");
    fetch(request, {
      headers: {
        ...Object.fromEntries(request.headers.entries()),
        [STREAM_TYPE_KEY]: STREAM_TYPE.REQUEST
      }
    });
    return fetch(
      new XRequest(request.method, request.url, {
        headers: {
          ...Object.fromEntries(request.headers.entries()),
          [STREAM_TYPE_KEY]: STREAM_TYPE.RESPONSE
        }
      })
    );
  } else {
    console.log("(FullDuplex Supported)");
    return fetch(request);
  }
}
__name(xfetch, "xfetch");
export {
  XRequest,
  XResponse,
  api,
  base,
  baseURL,
  create,
  createRequest,
  api_default as default,
  xfetch
};
//# sourceMappingURL=data:application/json;base64,
