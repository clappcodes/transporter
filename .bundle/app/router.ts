import { blue, yellow } from "../colors.ts";
var router_default = {
  async fetch(request, context) {
    const matched = this.route?.filter((layer) => {
      if (layer.method && context.method !== layer.method.toLowerCase()) {
        return false;
      }
      layer.route = layer.route || {
        pathname: "*",
        search: "*"
      };
      const pattern = typeof layer.route === "string" ? new URLPattern(layer.route, request.url) : layer.route instanceof URLPattern ? layer.route : new URLPattern(layer.route);
      const match = pattern.exec(context.url);
      return layer.match = match || void 0;
    }) || [];
    let response;
    console.groupCollapsed(
      "[" + blue(request.method) + "] " + yellow(request.url)
    );
    for (const layer of matched) {
      if (response instanceof Response) {
        break;
      }
      if (typeof layer.fetch === "function") {
        context.path = layer.match?.pathname.input;
        context.param = layer.match?.pathname.groups;
        context.route = layer.route;
        try {
          response = await layer.fetch(request, context);
          context.response = response;
          break;
        } catch (e) {
          context.error = e;
          console.groupEnd();
          throw e;
        }
      }
    }
    console.groupEnd();
    if (response instanceof Response) {
      return response;
    }
  },
  onError(error) {
    console.log("(onError)", error);
    return new Response(
      `<pre style="margin: 10%;font-size:16px">${error.stack}</pre>`,
      {
        headers: {
          "Content-Type": "text/html"
        },
        status: 500
      }
    );
  },
  onListen(addr) {
    console.log("(onListen)", addr);
  }
};
export {
  router_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vYXBwL3JvdXRlci50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgYmx1ZSwgeWVsbG93IH0gZnJvbSBcIi4uL2NvbG9ycy50c1wiO1xuaW1wb3J0IHR5cGUgeyBDb250ZXh0LCBIYW5kbGVyTW9kdWxlIH0gZnJvbSBcIi4uL3R5cGVzLnRzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYXN5bmMgZmV0Y2gocmVxdWVzdDogUmVxdWVzdCwgY29udGV4dDogQ29udGV4dCkge1xuICAgIGNvbnN0IG1hdGNoZWQgPSB0aGlzLnJvdXRlPy5maWx0ZXIoKGxheWVyKSA9PiB7XG4gICAgICBpZiAobGF5ZXIubWV0aG9kICYmIGNvbnRleHQubWV0aG9kICE9PSBsYXllci5tZXRob2QudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGxheWVyLnJvdXRlID0gbGF5ZXIucm91dGUgfHwge1xuICAgICAgICBwYXRobmFtZTogXCIqXCIsXG4gICAgICAgIHNlYXJjaDogXCIqXCIsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBwYXR0ZXJuID0gdHlwZW9mIGxheWVyLnJvdXRlID09PSBcInN0cmluZ1wiXG4gICAgICAgID8gbmV3IFVSTFBhdHRlcm4obGF5ZXIucm91dGUsIHJlcXVlc3QudXJsKVxuICAgICAgICA6IGxheWVyLnJvdXRlIGluc3RhbmNlb2YgVVJMUGF0dGVyblxuICAgICAgICA/IGxheWVyLnJvdXRlXG4gICAgICAgIDogbmV3IFVSTFBhdHRlcm4obGF5ZXIucm91dGUpO1xuXG4gICAgICBjb25zdCBtYXRjaCA9IHBhdHRlcm4uZXhlYyhjb250ZXh0LnVybCk7XG5cbiAgICAgIHJldHVybiBsYXllci5tYXRjaCA9IG1hdGNoIHx8IHVuZGVmaW5lZDtcbiAgICB9KSB8fCBbXTtcblxuICAgIGxldCByZXNwb25zZTogUmVzcG9uc2UgfCB1bmRlZmluZWQgfCB2b2lkO1xuXG4gICAgY29uc29sZS5ncm91cENvbGxhcHNlZChcbiAgICAgIFwiW1wiICsgYmx1ZShyZXF1ZXN0Lm1ldGhvZCkgKyBcIl0gXCIgKyB5ZWxsb3cocmVxdWVzdC51cmwpLFxuICAgICk7XG5cbiAgICBmb3IgKGNvbnN0IGxheWVyIG9mIG1hdGNoZWQpIHtcbiAgICAgIGlmIChyZXNwb25zZSBpbnN0YW5jZW9mIFJlc3BvbnNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxheWVyLmZldGNoID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY29udGV4dC5wYXRoID0gbGF5ZXIubWF0Y2g/LnBhdGhuYW1lLmlucHV0O1xuICAgICAgICBjb250ZXh0LnBhcmFtID0gbGF5ZXIubWF0Y2g/LnBhdGhuYW1lLmdyb3VwcyE7XG4gICAgICAgIGNvbnRleHQucm91dGUgPSBsYXllci5yb3V0ZTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIHJlc3BvbnNlID0gYXdhaXQgbGF5ZXIuZmV0Y2gocmVxdWVzdCwgY29udGV4dCk7XG4gICAgICAgICAgY29udGV4dC5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIC8vICAgY29uc29sZS5sb2coe1xuICAgICAgICAgIC8vICAgICB1cmw6IGNvbnRleHQudXJsLnRvU3RyaW5nKCksXG4gICAgICAgICAgLy8gICAgIHBhdGg6IGNvbnRleHQucGF0aCxcbiAgICAgICAgICAvLyAgICAgcm91dGU6IGNvbnRleHQucm91dGUsXG4gICAgICAgICAgLy8gICAgIHBhcmFtOiBjb250ZXh0LnBhcmFtLFxuICAgICAgICAgIC8vICAgICBlcnJvcjogY29udGV4dC5lcnJvcixcbiAgICAgICAgICAvLyAgICAgbGF5ZXI6IGxheWVyLFxuICAgICAgICAgIC8vICAgICByZXNwb25zZTogY29udGV4dC5yZXNwb25zZSxcbiAgICAgICAgICAvLyAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgY29udGV4dC5lcnJvciA9IGU7XG5cbiAgICAgICAgICAvLyAgIGNvbnNvbGUubG9nKHtcbiAgICAgICAgICAvLyAgICAgdXJsOiBjb250ZXh0LnVybC50b1N0cmluZygpLFxuICAgICAgICAgIC8vICAgICBwYXRoOiBjb250ZXh0LnBhdGgsXG4gICAgICAgICAgLy8gICAgIHJvdXRlOiBjb250ZXh0LnJvdXRlLFxuICAgICAgICAgIC8vICAgICBwYXJhbTogY29udGV4dC5wYXJhbSxcbiAgICAgICAgICAvLyAgICAgZXJyb3I6IGNvbnRleHQuZXJyb3IsXG4gICAgICAgICAgLy8gICAgIGxheWVyOiBsYXllcixcbiAgICAgICAgICAvLyAgICAgcmVzcG9uc2U6IGNvbnRleHQucmVzcG9uc2UsXG4gICAgICAgICAgLy8gICB9KTtcblxuICAgICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGNvbnNvbGUubG9nKGNvbnRleHQpO1xuICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcblxuICAgIGlmIChyZXNwb25zZSBpbnN0YW5jZW9mIFJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfVxuICB9LFxuICBvbkVycm9yKGVycm9yOiBFcnJvcikge1xuICAgIGNvbnNvbGUubG9nKFwiKG9uRXJyb3IpXCIsIGVycm9yKTtcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKFxuICAgICAgYDxwcmUgc3R5bGU9XCJtYXJnaW46IDEwJTtmb250LXNpemU6MTZweFwiPiR7ZXJyb3Iuc3RhY2t9PC9wcmU+YCxcbiAgICAgIHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwidGV4dC9odG1sXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgfSxcbiAgICApO1xuICB9LFxuICBvbkxpc3RlbihhZGRyKSB7XG4gICAgY29uc29sZS5sb2coXCIob25MaXN0ZW4pXCIsIGFkZHIpO1xuICB9LFxufSBhcyBIYW5kbGVyTW9kdWxlO1xuIl0sCiAgIm1hcHBpbmdzIjogIkFBQUEsU0FBUyxNQUFNLGNBQWM7QUFHN0IsSUFBTyxpQkFBUTtBQUFBLEVBQ2IsTUFBTSxNQUFNLFNBQWtCLFNBQWtCO0FBQzlDLFVBQU0sVUFBVSxLQUFLLE9BQU8sT0FBTyxDQUFDLFVBQVU7QUFDNUMsVUFBSSxNQUFNLFVBQVUsUUFBUSxXQUFXLE1BQU0sT0FBTyxZQUFZLEdBQUc7QUFDakUsZUFBTztBQUFBLE1BQ1Q7QUFFQSxZQUFNLFFBQVEsTUFBTSxTQUFTO0FBQUEsUUFDM0IsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLE1BQ1Y7QUFFQSxZQUFNLFVBQVUsT0FBTyxNQUFNLFVBQVUsV0FDbkMsSUFBSSxXQUFXLE1BQU0sT0FBTyxRQUFRLEdBQUcsSUFDdkMsTUFBTSxpQkFBaUIsYUFDdkIsTUFBTSxRQUNOLElBQUksV0FBVyxNQUFNLEtBQUs7QUFFOUIsWUFBTSxRQUFRLFFBQVEsS0FBSyxRQUFRLEdBQUc7QUFFdEMsYUFBTyxNQUFNLFFBQVEsU0FBUztBQUFBLElBQ2hDLENBQUMsS0FBSyxDQUFDO0FBRVAsUUFBSTtBQUVKLFlBQVE7QUFBQSxNQUNOLE1BQU0sS0FBSyxRQUFRLE1BQU0sSUFBSSxPQUFPLE9BQU8sUUFBUSxHQUFHO0FBQUEsSUFDeEQ7QUFFQSxlQUFXLFNBQVMsU0FBUztBQUMzQixVQUFJLG9CQUFvQixVQUFVO0FBQ2hDO0FBQUEsTUFDRjtBQUVBLFVBQUksT0FBTyxNQUFNLFVBQVUsWUFBWTtBQUNyQyxnQkFBUSxPQUFPLE1BQU0sT0FBTyxTQUFTO0FBQ3JDLGdCQUFRLFFBQVEsTUFBTSxPQUFPLFNBQVM7QUFDdEMsZ0JBQVEsUUFBUSxNQUFNO0FBRXRCLFlBQUk7QUFDRixxQkFBVyxNQUFNLE1BQU0sTUFBTSxTQUFTLE9BQU87QUFDN0Msa0JBQVEsV0FBVztBQUNuQjtBQUFBLFFBVUYsU0FBUyxHQUFHO0FBQ1Ysa0JBQVEsUUFBUTtBQVloQixrQkFBUSxTQUFTO0FBQ2pCLGdCQUFNO0FBQUEsUUFDUjtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBRUEsWUFBUSxTQUFTO0FBRWpCLFFBQUksb0JBQW9CLFVBQVU7QUFDaEMsYUFBTztBQUFBLElBQ1Q7QUFBQSxFQUNGO0FBQUEsRUFDQSxRQUFRLE9BQWM7QUFDcEIsWUFBUSxJQUFJLGFBQWEsS0FBSztBQUM5QixXQUFPLElBQUk7QUFBQSxNQUNULDJDQUEyQyxNQUFNLEtBQUs7QUFBQSxNQUN0RDtBQUFBLFFBQ0UsU0FBUztBQUFBLFVBQ1AsZ0JBQWdCO0FBQUEsUUFDbEI7QUFBQSxRQUNBLFFBQVE7QUFBQSxNQUNWO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFBQSxFQUNBLFNBQVMsTUFBTTtBQUNiLFlBQVEsSUFBSSxjQUFjLElBQUk7QUFBQSxFQUNoQztBQUNGOyIsCiAgIm5hbWVzIjogW10KfQo=
